///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.1.10194/W32 for 8051        20/Apr/2015  13:51:25 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\Coordinator /
//                           Project for editing\Projects\zstack\MyCoordinato /
//                          r\Coordinator\Source\CoordinatorApp.c             /
//    Command line       =  -f "C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\Coordin /
//                          ator Project for editing\Projects\zstack\MyCoordi /
//                          nator\Coordinator\CC2530DB\..\..\..\Tools\CC2530D /
//                          B\f8wCoord.cfg" (-DCPU32MHZ -DROOT=__near_func    /
//                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                  /
//                          -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8        /
//                          -DMAC_CFG_RX_MAX=5 -DZDO_COORDINATOR -DRTR_NWK)   /
//                          -f "C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\Coordin /
//                          ator Project for editing\Projects\zstack\MyCoordi /
//                          nator\Coordinator\CC2530DB\..\..\..\Tools\CC2530D /
//                          B\f8wConfig.cfg" (-DZIGBEEPRO -DSECURE=0          /
//                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                 /
//                          -DDEFAULT_CHANLIST=0x02000000                     /
//                          -DZDAPP_CONFIG_PAN_ID=0x0030                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 "C:\Users\William\Desktop\ /
//                          ±œ“µ…Ëº∆\SRC\Coordinator Project for              /
//                          editing\Projects\zstack\MyCoordinator\Coordinator /
//                          \Source\CoordinatorApp.c" -D ZTOOL_P1 -D          /
//                          NV_RESTORE=1 -lC "C:\Users\William\Desktop\±œ“µ…Ë /
//                          º∆\SRC\Coordinator Project for                    /
//                          editing\Projects\zstack\MyCoordinator\Coordinator /
//                          \CC2530DB\CoordinatorEB\List\" -lA                /
//                          "C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\Coordinato /
//                          r Project for editing\Projects\zstack\MyCoordinat /
//                          or\Coordinator\CC2530DB\CoordinatorEB\List\"      /
//                          --diag_suppress Pe001,Pa010 -o                    /
//                          "C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\Coordinato /
//                          r Project for editing\Projects\zstack\MyCoordinat /
//                          or\Coordinator\CC2530DB\CoordinatorEB\Obj\" -e    /
//                          --no_code_motion --debug --core=plain             /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I                           /
//                          "C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\Coordinato /
//                          r Project for editing\Projects\zstack\MyCoordinat /
//                          or\Coordinator\CC2530DB\" -I                      /
//                          "C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\Coordinato /
//                          r Project for editing\Projects\zstack\MyCoordinat /
//                          or\Coordinator\CC2530DB\..\Source\" -I            /
//                          "C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\Coordinato /
//                          r Project for editing\Projects\zstack\MyCoordinat /
//                          or\Coordinator\CC2530DB\..\..\..\ZMain\TI2530DB\" /
//                           -I "C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\Coordi /
//                          nator Project for editing\Projects\zstack\MyCoord /
//                          inator\Coordinator\CC2530DB\..\..\..\..\..\Compon /
//                          ents\hal\include\" -I "C:\Users\William\Desktop\± /
//                          œ“µ…Ëº∆\SRC\Coordinator Project for               /
//                          editing\Projects\zstack\MyCoordinator\Coordinator /
//                          \CC2530DB\..\..\..\..\..\Components\hal\target\CC /
//                          2530EB\" -I "C:\Users\William\Desktop\±œ“µ…Ëº∆\SR /
//                          C\Coordinator Project for                         /
//                          editing\Projects\zstack\MyCoordinator\Coordinator /
//                          \CC2530DB\..\..\..\..\..\Components\mac\include\" /
//                           -I "C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\Coordi /
//                          nator Project for editing\Projects\zstack\MyCoord /
//                          inator\Coordinator\CC2530DB\..\..\..\..\..\Compon /
//                          ents\mac\high_level\" -I                          /
//                          "C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\Coordinato /
//                          r Project for editing\Projects\zstack\MyCoordinat /
//                          or\Coordinator\CC2530DB\..\..\..\..\..\Components /
//                          \mac\low_level\srf04\" -I                         /
//                          "C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\Coordinato /
//                          r Project for editing\Projects\zstack\MyCoordinat /
//                          or\Coordinator\CC2530DB\..\..\..\..\..\Components /
//                          \mac\low_level\srf04\single_chip\" -I             /
//                          "C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\Coordinato /
//                          r Project for editing\Projects\zstack\MyCoordinat /
//                          or\Coordinator\CC2530DB\..\..\..\..\..\Components /
//                          \mt\" -I "C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\C /
//                          oordinator Project for editing\Projects\zstack\My /
//                          Coordinator\Coordinator\CC2530DB\..\..\..\..\..\C /
//                          omponents\osal\include\" -I                       /
//                          "C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\Coordinato /
//                          r Project for editing\Projects\zstack\MyCoordinat /
//                          or\Coordinator\CC2530DB\..\..\..\..\..\Components /
//                          \services\saddr\" -I "C:\Users\William\Desktop\±œ /
//                          “µ…Ëº∆\SRC\Coordinator Project for                /
//                          editing\Projects\zstack\MyCoordinator\Coordinator /
//                          \CC2530DB\..\..\..\..\..\Components\services\sdat /
//                          a\" -I "C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\Coo /
//                          rdinator Project for editing\Projects\zstack\MyCo /
//                          ordinator\Coordinator\CC2530DB\..\..\..\..\..\Com /
//                          ponents\stack\af\" -I "C:\Users\William\Desktop\± /
//                          œ“µ…Ëº∆\SRC\Coordinator Project for               /
//                          editing\Projects\zstack\MyCoordinator\Coordinator /
//                          \CC2530DB\..\..\..\..\..\Components\stack\nwk\"   /
//                          -I "C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\Coordin /
//                          ator Project for editing\Projects\zstack\MyCoordi /
//                          nator\Coordinator\CC2530DB\..\..\..\..\..\Compone /
//                          nts\stack\sapi\" -I "C:\Users\William\Desktop\±œ“ /
//                          µ…Ëº∆\SRC\Coordinator Project for                 /
//                          editing\Projects\zstack\MyCoordinator\Coordinator /
//                          \CC2530DB\..\..\..\..\..\Components\stack\sec\"   /
//                          -I "C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\Coordin /
//                          ator Project for editing\Projects\zstack\MyCoordi /
//                          nator\Coordinator\CC2530DB\..\..\..\..\..\Compone /
//                          nts\stack\sys\" -I "C:\Users\William\Desktop\±œ“µ /
//                          …Ëº∆\SRC\Coordinator Project for                  /
//                          editing\Projects\zstack\MyCoordinator\Coordinator /
//                          \CC2530DB\..\..\..\..\..\Components\stack\zdo\"   /
//                          -I "C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\Coordin /
//                          ator Project for editing\Projects\zstack\MyCoordi /
//                          nator\Coordinator\CC2530DB\..\..\..\..\..\Compone /
//                          nts\zmac\" -I "C:\Users\William\Desktop\±œ“µ…Ëº∆\ /
//                          SRC\Coordinator Project for                       /
//                          editing\Projects\zstack\MyCoordinator\Coordinator /
//                          \CC2530DB\..\..\..\..\..\Components\zmac\f8w\"    /
//                          -Ohz --require_prototypes                         /
//    List file          =  C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\Coordinator /
//                           Project for editing\Projects\zstack\MyCoordinato /
//                          r\Coordinator\CC2530DB\CoordinatorEB\List\Coordin /
//                          atorApp.s51                                       /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME CoordinatorApp

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?MOVE_LONG8_XDATA_XDATA
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?S_SHL
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8

        PUBLIC ??CoordinatorApp_CMDSerial?relay
        FUNCTION ??CoordinatorApp_CMDSerial?relay,0203H
        PUBLIC ??CoordinatorApp_Init?relay
        FUNCTION ??CoordinatorApp_Init?relay,0203H
        PUBLIC ??CoordinatorApp_ProcessEvent?relay
        FUNCTION ??CoordinatorApp_ProcessEvent?relay,0203H
        PUBLIC CoordinatorApp_CMDSerial
        FUNCTION CoordinatorApp_CMDSerial,021203H
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC CoordinatorApp_Init
        FUNCTION CoordinatorApp_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC CoordinatorApp_ProcessEvent
        FUNCTION CoordinatorApp_ProcessEvent,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 18, STACK
        PUBWEAK WDCTL
        PUBWEAK _A_IEN0
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
MT_UartInit         SYMBOL "MT_UartInit"
MT_UartRegisterTaskID SYMBOL "MT_UartRegisterTaskID"
afRegister          SYMBOL "afRegister"
RegisterForKeys     SYMBOL "RegisterForKeys"
osal_memcpy         SYMBOL "osal_memcpy"
aps_AddGroup        SYMBOL "aps_AddGroup"
osal_msg_receive    SYMBOL "osal_msg_receive"
CoordinatorWriteUART SYMBOL "CoordinatorWriteUART"
osal_start_timerEx  SYMBOL "osal_start_timerEx"
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
CoordinatorApp_HandleAfIncomingMessage SYMBOL "CoordinatorApp_HandleAfIncomingMessage"
CoordinatorApp_SendBroadcastMessage SYMBOL "CoordinatorApp_SendBroadcastMessage"
NLME_UpdateNV       SYMBOL "NLME_UpdateNV"
CoordinatorApp_SendP2PMessage SYMBOL "CoordinatorApp_SendP2PMessage"
??CoordinatorApp_HandleAfIncomingMessage?relay SYMBOL "?relay", CoordinatorApp_HandleAfIncomingMessage
??CoordinatorApp_SendBroadcastMessage?relay SYMBOL "?relay", CoordinatorApp_SendBroadcastMessage
??CoordinatorApp_SendP2PMessage?relay SYMBOL "?relay", CoordinatorApp_SendP2PMessage
??CoordinatorWriteUART?relay SYMBOL "?relay", CoordinatorWriteUART
??MT_UartInit?relay SYMBOL "?relay", MT_UartInit
??MT_UartRegisterTaskID?relay SYMBOL "?relay", MT_UartRegisterTaskID
??NLME_UpdateNV?relay SYMBOL "?relay", NLME_UpdateNV
??RegisterForKeys?relay SYMBOL "?relay", RegisterForKeys
??afRegister?relay  SYMBOL "?relay", afRegister
??aps_AddGroup?relay SYMBOL "?relay", aps_AddGroup
??osal_memcpy?relay SYMBOL "?relay", osal_memcpy
??osal_msg_deallocate?relay SYMBOL "?relay", osal_msg_deallocate
??osal_msg_receive?relay SYMBOL "?relay", osal_msg_receive
??osal_start_timerEx?relay SYMBOL "?relay", osal_start_timerEx
CoordinatorApp_CMDSerial SYMBOL "CoordinatorApp_CMDSerial"
??CoordinatorApp_CMDSerial?relay SYMBOL "?relay", CoordinatorApp_CMDSerial
CoordinatorApp_Init SYMBOL "CoordinatorApp_Init"
??CoordinatorApp_Init?relay SYMBOL "?relay", CoordinatorApp_Init
CoordinatorApp_ProcessEvent SYMBOL "CoordinatorApp_ProcessEvent"
??CoordinatorApp_ProcessEvent?relay SYMBOL "?relay", CoordinatorApp_ProcessEvent

        EXTERN MT_UartInit
        FUNCTION MT_UartInit,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MT_UartRegisterTaskID
        FUNCTION MT_UartRegisterTaskID,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN afRegister
        FUNCTION afRegister,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN RegisterForKeys
        FUNCTION RegisterForKeys,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN aps_AddGroup
        FUNCTION aps_AddGroup,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN CoordinatorWriteUART
        FUNCTION CoordinatorWriteUART,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN CoordinatorApp_HandleAfIncomingMessage
        FUNCTION CoordinatorApp_HandleAfIncomingMessage,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN CoordinatorApp_SendBroadcastMessage
        FUNCTION CoordinatorApp_SendBroadcastMessage,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_UpdateNV
        FUNCTION NLME_UpdateNV,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN CoordinatorApp_SendP2PMessage
        FUNCTION CoordinatorApp_SendP2PMessage,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??CoordinatorApp_HandleAfIncomingMessage?relay
        FUNCTION ??CoordinatorApp_HandleAfIncomingMessage?relay,00H
        EXTERN ??CoordinatorApp_SendBroadcastMessage?relay
        FUNCTION ??CoordinatorApp_SendBroadcastMessage?relay,00H
        EXTERN ??CoordinatorApp_SendP2PMessage?relay
        FUNCTION ??CoordinatorApp_SendP2PMessage?relay,00H
        EXTERN ??CoordinatorWriteUART?relay
        FUNCTION ??CoordinatorWriteUART?relay,00H
        EXTERN ??MT_UartInit?relay
        FUNCTION ??MT_UartInit?relay,00H
        EXTERN ??MT_UartRegisterTaskID?relay
        FUNCTION ??MT_UartRegisterTaskID?relay,00H
        EXTERN ??NLME_UpdateNV?relay
        FUNCTION ??NLME_UpdateNV?relay,00H
        EXTERN ??RegisterForKeys?relay
        FUNCTION ??RegisterForKeys?relay,00H
        EXTERN ??afRegister?relay
        FUNCTION ??afRegister?relay,00H
        EXTERN ??aps_AddGroup?relay
        FUNCTION ??aps_AddGroup?relay,00H
        EXTERN ??osal_memcpy?relay
        FUNCTION ??osal_memcpy?relay,00H
        EXTERN ??osal_msg_deallocate?relay
        FUNCTION ??osal_msg_deallocate?relay,00H
        EXTERN ??osal_msg_receive?relay
        FUNCTION ??osal_msg_receive?relay,00H
        EXTERN ??osal_start_timerEx?relay
        FUNCTION ??osal_start_timerEx?relay,00H
        EXTERN AddrList
        EXTERN CoordinatorApp_Broadcast_DstAddr
        EXTERN CoordinatorApp_Group
        EXTERN CoordinatorApp_Group_DstAddr
        EXTERN CoordinatorApp_NwkState
        EXTERN CoordinatorApp_P2PDstAddr
        EXTERN CoordinatorApp_SimpleDesc
        EXTERN CoordinatorApp_TaskID
        EXTERN CoordinatorApp_TransID
        EXTERN CoordinatorApp_epDesc
        EXTERN GroupId
        EXTERN PANID
        EXTERN _NIB

// C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\Coordinator Project for editing\Projects\zstack\MyCoordinator\Coordinator\Source\CoordinatorApp.c
//    1 /**************************************************************************************************
//    2   Filename:       CoordinatorApp.c
//    3   Revised:        $Date: 2009-03-18 15:56:27 -0700 (Wed, 18 Mar 2009) $
//    4   Revision:       $Revision: 19453 $
//    5 
//    6   Description:    Coordinator Application (no Profile).
//    7 
//    8 
//    9   Copyright 2007 Texas Instruments Incorporated. All rights reserved.
//   10 
//   11   IMPORTANT: Your use of this Software is limited to those specific rights
//   12   granted under the terms of a software license agreement between the user
//   13   who downloaded the software, his/her employer (which must be your employer)
//   14   and Texas Instruments Incorporated (the "License").  You may not use this
//   15   Software unless you agree to abide by the terms of the License. The License
//   16   limits your use, and you acknowledge, that the Software mdsay not be modified,
//   17   copied or distributed unless embedded on a Texas Instruments microcontroller
//   18   or used solely and exclusively in conjunction with a Texas Instruments radio
//   19   frequency transceiver, which is integrated into your product.  Other than for
//   20   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   21   works of, modify, distribute, perform, display or sell this Software and/or
//   22   its documentation for any purpose.
//   23 
//   24   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   25   PROVIDED ìAS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   26   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   27   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   28   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   29   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   30   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   31   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   32   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   33   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   34   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   35 
//   36   Should you have any questions regarding your right to use this Software,
//   37   contact Texas Instruments Incorporated at www.TI.com.
//   38 **************************************************************************************************/
//   39 
//   40 /*********************************************************************
//   41  * INCLUDES
//   42  */
//   43 
//   44 #include "CoordinatorVariable.h"

        ASEGN SFR_AN:DATA:NOROOT,0a8H
// union <unnamed> volatile __sfr _A_IEN0
_A_IEN0:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0c9H
// unsigned char volatile __sfr WDCTL
WDCTL:
        DATA8
        DS 1
//   45 #include "CoordinatorAF.h"
//   46 #include "CoordinatorApp.h"
//   47 
//   48 /*********************************************************************
//   49  * MACROS
//   50  */
//   51 
//   52 /*********************************************************************
//   53  * CONSTANTS
//   54  */
//   55 
//   56 /*********************************************************************
//   57  * TYPEDEFS
//   58  */
//   59 
//   60 /*********************************************************************
//   61  * GLOBAL VARIABLES
//   62  */
//   63 
//   64 // This list should be filled with Application specific Cluster IDs.
//   65 
//   66 
//   67 // This is the Endpoint/Interface description.  It is defined here, but
//   68 // filled-in in CoordinatorApp_Init().  Another way to go would be to fill
//   69 // in the structure here and make it a "const" (in code space).  The
//   70 // way it's defined in this Coordinator app it is define in RAM.
//   71 
//   72 
//   73 /*********************************************************************
//   74  * EXTERNAL VARIABLES
//   75  */
//   76 
//   77 /*********************************************************************
//   78  * EXTERNAL FUNCTIONS
//   79  */
//   80 
//   81 /*********************************************************************
//   82  * LOCAL VARIABLES
//   83  */
//   84 
//   85 
//   86 /*********************************************************************
//   87  * LOCAL FUNCTIONS
//   88  */
//   89 void CoordinatorApp_CMDSerial(mtOSALSerialData_t *Msg);   // Ω” ’¥Æø⁄ ˝æ›≤¢¥¶¿Ì
//   90 /*********************************************************************
//   91  * NETWORK LAYER CALLBACKS
//   92  */
//   93 
//   94 /*********************************************************************
//   95  * PUBLIC FUNCTIONS
//   96  */
//   97 
//   98 /*********************************************************************
//   99  * @fn      CoordinatorApp_Init
//  100  *
//  101  * @brief   Initialization function for the Generic App Task.
//  102  *          This is called during initialization and should contain
//  103  *          any application specific initialization (ie. hardware
//  104  *          initialization/setup, table initialization, power up
//  105  *          notificaiton ... ).
//  106  *
//  107  * @param   task_id - the ID assigned by OSAL.  This ID should be
//  108  *                    used to send messages and set timers.
//  109  *
//  110  * @return  none
//  111  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  112 void CoordinatorApp_Init( uint8 task_id )
CoordinatorApp_Init:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function CoordinatorApp_Init
        CODE
//  113 {
        FUNCALL CoordinatorApp_Init, MT_UartInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL CoordinatorApp_Init, MT_UartRegisterTaskID
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL CoordinatorApp_Init, afRegister
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL CoordinatorApp_Init, RegisterForKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL CoordinatorApp_Init, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL CoordinatorApp_Init, aps_AddGroup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xb
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
//  114   CoordinatorApp_TaskID = task_id;
        MOV     DPTR,#CoordinatorApp_TaskID
        MOVX    @DPTR,A
//  115   CoordinatorApp_NwkState = DEV_INIT;
        MOV     DPTR,#CoordinatorApp_NwkState
        MOV     A,#0x1
        MOVX    @DPTR,A
//  116   CoordinatorApp_TransID = 0;
        MOV     DPTR,#CoordinatorApp_TransID
        CLR     A
        MOVX    @DPTR,A
//  117   
//  118   MT_UartInit();
        ; Setup parameters for call to function MT_UartInit
        LCALL   ??MT_UartInit?relay
//  119   MT_UartRegisterTaskID(task_id);
        ; Setup parameters for call to function MT_UartRegisterTaskID
        MOV     A,R6
        MOV     R1,A
        LCALL   ??MT_UartRegisterTaskID?relay
//  120   PANID =  _NIB.nwkPanId;
        LCALL   ?Subroutine2 & 0xFFFF
//  121   
//  122   
//  123   //for debug use
//  124   /*uint8 panid;  
//  125   panid = (uint8)((PANID >> 8) & 0x00ff);
//  126   HalUARTWrite(0,&panid,1);
//  127   panid = (uint8)((PANID) & 0x00ff);
//  128   HalUARTWrite(0,&panid,1);*/
//  129 
//  130   // Device hardware initialization can be added here or in main() (Zmain.c).
//  131   // If the hardware is application specific - add it here.
//  132   // If the hardware is other parts of the device add it in main().
//  133 
//  134  #if defined ( BUILD_ALL_DEVICES )
//  135   // The "Demo" target is setup to have BUILD_ALL_DEVICES and HOLD_AUTO_START
//  136   // We are looking at a jumper (defined in CoordinatorAppHw.c) to be jumpered
//  137   // together - if they are - we will start up a coordinator. Otherwise,
//  138   // the device will start as a router.
//  139 #endif // BUILD_ALL_DEVICES
//  140 
//  141 #if defined ( HOLD_AUTO_START )
//  142   // HOLD_AUTO_START is a compile option that will surpress ZDApp
//  143   //  from starting the device and wait for the application to
//  144   //  start the device.
//  145   ZDOInitDevice(0);
//  146 #endif
//  147 
//  148   // Setup for the periodic message's destination address
//  149   // Broadcast to everyone
//  150   CoordinatorApp_Broadcast_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
??CrossCallReturnLabel_2:
        MOV     DPTR,#CoordinatorApp_Broadcast_DstAddr + 8
        MOV     A,#0xf
        MOVX    @DPTR,A
//  151   CoordinatorApp_Broadcast_DstAddr.endPoint = CoordinatorAPP_ENDPOINT;
        INC     DPTR
        MOV     A,#0x14
        MOVX    @DPTR,A
//  152   CoordinatorApp_Broadcast_DstAddr.addr.shortAddr = 0xFFFF;
        MOV     DPTR,#CoordinatorApp_Broadcast_DstAddr
        MOV     A,#-0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  153 
//  154   // Setup for the flash command's destination address - Group 1
//  155   CoordinatorApp_Group_DstAddr.addrMode = (afAddrMode_t)afAddrGroup;
        MOV     DPTR,#CoordinatorApp_Group_DstAddr + 8
        MOV     A,#0x1
        MOVX    @DPTR,A
//  156   CoordinatorApp_Group_DstAddr.endPoint = CoordinatorAPP_ENDPOINT;
        INC     DPTR
        MOV     A,#0x14
        MOVX    @DPTR,A
//  157   CoordinatorApp_Group_DstAddr.addr.shortAddr = GroupId;
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_6:
        MOV     DPTR,#CoordinatorApp_Group_DstAddr
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  158   
//  159   CoordinatorApp_P2PDstAddr.addrMode = (afAddrMode_t)afAddr16Bit;
        MOV     DPTR,#CoordinatorApp_P2PDstAddr + 8
        MOV     A,#0x2
        MOVX    @DPTR,A
//  160   CoordinatorApp_P2PDstAddr.endPoint = CoordinatorAPP_ENDPOINT;
        INC     DPTR
        MOV     A,#0x14
        MOVX    @DPTR,A
//  161   CoordinatorApp_P2PDstAddr.addr.shortAddr = 0x0000;
        MOV     DPTR,#CoordinatorApp_P2PDstAddr
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  162   
//  163   // Fill out the endpoint description.
//  164   CoordinatorApp_epDesc.endPoint = CoordinatorAPP_ENDPOINT;
        MOV     DPTR,#CoordinatorApp_epDesc
        MOV     A,#0x14
        MOVX    @DPTR,A
//  165   CoordinatorApp_epDesc.task_id = &CoordinatorApp_TaskID;
        INC     DPTR
        MOV     A,#CoordinatorApp_TaskID & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(CoordinatorApp_TaskID >> 8) & 0xff
        MOVX    @DPTR,A
//  166   CoordinatorApp_epDesc.simpleDesc
//  167             = (SimpleDescriptionFormat_t *)&CoordinatorApp_SimpleDesc;
        INC     DPTR
        MOV     A,#CoordinatorApp_SimpleDesc & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(CoordinatorApp_SimpleDesc >> 8) & 0xff
        MOVX    @DPTR,A
//  168   CoordinatorApp_epDesc.latencyReq = noLatencyReqs;
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  169 
//  170   // Register the endpoint description with the AF
//  171   afRegister( &CoordinatorApp_epDesc );
        ; Setup parameters for call to function afRegister
        MOV     R2,#CoordinatorApp_epDesc & 0xff
        MOV     R3,#(CoordinatorApp_epDesc >> 8) & 0xff
        LCALL   ??afRegister?relay
//  172 
//  173   // Register for all key events - This app will handle all key events
//  174   RegisterForKeys( CoordinatorApp_TaskID );
        ; Setup parameters for call to function RegisterForKeys
        MOV     DPTR,#CoordinatorApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??RegisterForKeys?relay
//  175 
//  176   // By default, all devices start out in Group 1
//  177   CoordinatorApp_Group.ID = GroupId;//0x0001
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_7:
        MOV     DPTR,#CoordinatorApp_Group
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  178   osal_memcpy( CoordinatorApp_Group.name, "Group 1", 7  );
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 0,#`?<Constant "Group 1">` & 0xff
        MOV     ?V0 + 1,#(`?<Constant "Group 1">` >> 8) & 0xff
        MOV     ?V0 + 2,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     R4,#0x7
        MOV     R5,#0x0
        MOV     R2,#(CoordinatorApp_Group + 2) & 0xff
        MOV     R3,#((CoordinatorApp_Group + 2) >> 8) & 0xff
        LCALL   ??osal_memcpy?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 11)
//  179   aps_AddGroup( CoordinatorAPP_ENDPOINT, &CoordinatorApp_Group );
        ; Setup parameters for call to function aps_AddGroup
        MOV     R2,#CoordinatorApp_Group & 0xff
        MOV     R3,#(CoordinatorApp_Group >> 8) & 0xff
        MOV     R1,#0x14
        LCALL   ??aps_AddGroup?relay
//  180 }
        MOV     R7,#0x3
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiCond1 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_6
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond2 Using cfiCommon0
        CFI (cfiCond2) NoFunction
        CFI (cfiCond2) Conditional ??CrossCallReturnLabel_7
        CFI (cfiCond2) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond2) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond2) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond2) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond2) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond2) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond2) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond2) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond2) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond2) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond2) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond2) CFA_SP SP+0
        CFI (cfiCond2) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker3 Using cfiCommon1
        CFI (cfiPicker3) NoFunction
        CFI (cfiPicker3) Picker
        MOV     DPTR,#GroupId
        CFI EndBlock cfiCond1
        CFI EndBlock cfiCond2
        CFI EndBlock cfiPicker3
        REQUIRE ??Subroutine5_0
        ; // Fall through to label ??Subroutine5_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine5_0:
        CFI Block cfiCond4 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_4
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond5 Using cfiCommon0
        CFI (cfiCond5) NoFunction
        CFI (cfiCond5) Conditional ??CrossCallReturnLabel_5
        CFI (cfiCond5) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond5) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond5) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond5) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond5) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond5) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond5) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond5) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond5) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond5) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond5) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond5) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond5) CFA_SP SP+0
        CFI (cfiCond5) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond6 Using cfiCommon0
        CFI (cfiCond6) NoFunction
        CFI (cfiCond6) Conditional ??CrossCallReturnLabel_6
        CFI (cfiCond6) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond6) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond6) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond6) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond6) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond6) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond6) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond6) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond6) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond6) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond6) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond6) CFA_SP SP+0
        CFI (cfiCond6) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond7 Using cfiCommon0
        CFI (cfiCond7) NoFunction
        CFI (cfiCond7) Conditional ??CrossCallReturnLabel_7
        CFI (cfiCond7) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond7) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond7) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond7) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond7) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond7) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond7) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond7) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond7) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond7) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond7) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond7) CFA_SP SP+0
        CFI (cfiCond7) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker8 Using cfiCommon1
        CFI (cfiPicker8) NoFunction
        CFI (cfiPicker8) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        RET
        CFI EndBlock cfiCond4
        CFI EndBlock cfiCond5
        CFI EndBlock cfiCond6
        CFI EndBlock cfiCond7
        CFI EndBlock cfiPicker8
//  181 
//  182 /*********************************************************************
//  183  * @fn      CoordinatorApp_ProcessEvent
//  184  *
//  185  * @brief   Generic Application Task event processor.  This function
//  186  *          is called to process all events for the task.  Events
//  187  *          include timers, messages and any other user defined events.
//  188  *
//  189  * @param   task_id  - The OSAL assigned task ID.
//  190  * @param   events - events to process.  This is a bit map and can
//  191  *                   contain more than one event.
//  192  *
//  193  * @return  none
//  194  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  195 uint16 CoordinatorApp_ProcessEvent( uint8 task_id, uint16 events )
CoordinatorApp_ProcessEvent:
        CFI Block cfiBlock9 Using cfiCommon0
        CFI Function CoordinatorApp_ProcessEvent
        CODE
//  196 {
        FUNCALL CoordinatorApp_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL CoordinatorApp_ProcessEvent, CoordinatorWriteUART
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL CoordinatorApp_ProcessEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL CoordinatorApp_ProcessEvent, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL CoordinatorApp_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL CoordinatorApp_ProcessEvent, CoordinatorApp_CMDSerial
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL CoordinatorApp_ProcessEvent, CoordinatorApp_HandleAfIncomingMessage
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL CoordinatorApp_ProcessEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 6
        MOV     A,#-0x6
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 18)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  197   afIncomingMSGPacket_t *MSGpkt;
//  198   (void)task_id;  // Intentionally unreferenced parameter
//  199 
//  200   if ( events & SYS_EVENT_MSG )
        ANL     A,#0x80
        JNZ     $+5
        LJMP    ??CoordinatorApp_ProcessEvent_0 & 0xFFFF
//  201   {
//  202     MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( CoordinatorApp_TaskID );
        ; Setup parameters for call to function osal_msg_receive
        SJMP    ??CoordinatorApp_ProcessEvent_1
//  203     while ( MSGpkt )
//  204     {
//  205       switch ( MSGpkt->hdr.event)
//  206       {
//  207       case CMD_SERIAL_MSG :
//  208            CoordinatorApp_CMDSerial((mtOSALSerialData_t *)MSGpkt);
//  209            break;
//  210         // Received when a messages is received (OTA) for this endpoint
//  211         case AF_INCOMING_MSG_CMD:
//  212           CoordinatorApp_HandleAfIncomingMessage( MSGpkt );
//  213           break;
//  214         // Received whenever the device changes state in the network
//  215         case ZDO_STATE_CHANGE:
//  216           CoordinatorApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
??CoordinatorApp_ProcessEvent_2:
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPTR,#CoordinatorApp_NwkState
        MOVX    @DPTR,A
//  217           if ((CoordinatorApp_NwkState == DEV_ZB_COORD))
        XRL     A,#0x9
        JNZ     ??CrossCallReturnLabel_8
//  218           {
//  219            // NLME_RestoreFromNV();
//  220             // tell the arm the Personal Area Net with PANID is created 
//  221             uint8 str[6] = {0xff,0xff,0xff,0xff};
        MOV     DPTR,#`?<Constant {255, 255, 255, 255}>`
        PUSH    DPL
        CFI CFA_SP SP+-1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPH,#(`?<Constant {255, 255, 255, 255}>` >> 8) & 0xff
        POP     DPL
        CFI CFA_SP SP+0
        MOV     A,#0x6
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  222             PANID =  _NIB.nwkPanId;
        LCALL   ?Subroutine2 & 0xFFFF
//  223             str[4] = (uint8)((PANID >> 8) & 0x00ff);
??CrossCallReturnLabel_3:
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R1
        MOVX    @DPTR,A
//  224             str[5] = (uint8)((PANID) & 0x00ff);
        MOV     DPTR,#PANID
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  225             CoordinatorWriteUART(str,6);
        ; Setup parameters for call to function CoordinatorWriteUART
        MOV     R1,#0x6
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??CoordinatorWriteUART?relay
//  226             // Start count the tick_alive of the AddrList
//  227       
//  228             osal_start_timerEx( CoordinatorApp_TaskID,
//  229                               CoordinatorAPP_TICK_ALIVE_MSG_EVT,
//  230                              6000);
        ; Setup parameters for call to function osal_start_timerEx
        LCALL   ?Subroutine4 & 0xFFFF
//  231             
//  232           }
//  233           else
//  234           {
//  235            //  no existing on the network
//  236           }
//  237           break;
//  238          
//  239 
//  240         default:
//  241           break;
//  242       }
//  243 
//  244       // Release the memory
//  245       osal_msg_deallocate( (uint8 *)MSGpkt );
??CrossCallReturnLabel_8:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??osal_msg_deallocate?relay
//  246 
//  247       // Next - if one is available
//  248       MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( CoordinatorApp_TaskID );
        ; Setup parameters for call to function osal_msg_receive
??CoordinatorApp_ProcessEvent_1:
        MOV     DPTR,#CoordinatorApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_msg_receive?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,?V0 + 0
        ORL     A,?V0 + 1
        JZ      ??CoordinatorApp_ProcessEvent_3
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        DEC     A
        JZ      ??CoordinatorApp_ProcessEvent_4
        ADD     A,#-0x19
        JZ      ??CoordinatorApp_ProcessEvent_5
        ADD     A,#0x49
        JZ      ??CoordinatorApp_ProcessEvent_2
        SJMP    ??CrossCallReturnLabel_8
??CoordinatorApp_ProcessEvent_4:
        ; Setup parameters for call to function CoordinatorApp_CMDSerial
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??CoordinatorApp_CMDSerial?relay
        SJMP    ??CrossCallReturnLabel_8
??CoordinatorApp_ProcessEvent_5:
        ; Setup parameters for call to function CoordinatorApp_HandleAfIncomingMessage
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??CoordinatorApp_HandleAfIncomingMessage?relay
        SJMP    ??CrossCallReturnLabel_8
//  249     }
//  250 
//  251     // return unprocessed events
//  252     return (events ^ SYS_EVENT_MSG);
??CoordinatorApp_ProcessEvent_3:
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        XRL     A,#0x80
        MOV     R3,A
        SJMP    ??CoordinatorApp_ProcessEvent_6
//  253   }
//  254 
//  255   
//  256   if(events & CoordinatorAPP_TICK_ALIVE_MSG_EVT)
??CoordinatorApp_ProcessEvent_0:
        MOV     A,R6
        MOV     C,0xE0 /* A   */.0
        JNC     ??CrossCallReturnLabel_9
//  257   {
//  258     uint8 i = 0;
//  259     for(i = 0; i < DEVICEID_MAX; i++)
        MOV     R2,#0x0
//  260     {
//  261         if(AddrList[i].tick_alive == 0)
??CoordinatorApp_ProcessEvent_7:
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,#0x0
        MOV     A,#0x2
        MOV     R0,#?V0 + 0
        LCALL   ?S_SHL
        MOV     A,#(AddrList + 3) & 0xff
        ADD     A,?V0 + 0
        MOV     DPL,A
        MOV     A,#((AddrList + 3) >> 8) & 0xff
        ADDC    A,?V0 + 1
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,#0x0
        JNZ     ??CoordinatorApp_ProcessEvent_8
//  262         {
//  263             AddrList[i].status = FALSE;
        MOV     A,#0x2
        MOV     R0,#?V0 + 0
        LCALL   ?S_SHL
        LCALL   ?Subroutine1 & 0xFFFF
??CrossCallReturnLabel_0:
        CLR     A
        MOVX    @DPTR,A
//  264             AddrList[i].tick_alive = 0;
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    @DPTR,A
//  265             AddrList[i].addr = 0x0000;
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    @DPTR,A
        INC     DPTR
        SJMP    ??CoordinatorApp_ProcessEvent_9
//  266         }
//  267         else
//  268         {
//  269              AddrList[i].tick_alive--;
??CoordinatorApp_ProcessEvent_8:
        MOV     A,#0x2
        MOV     R0,#?V0 + 0
        LCALL   ?S_SHL
        LCALL   ?Subroutine1 & 0xFFFF
??CrossCallReturnLabel_1:
        INC     DPTR
        MOVX    A,@DPTR
        DEC     A
        MOVX    @DPTR,A
//  270              AddrList[i].status = TRUE;
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        MOV     A,#0x1
??CoordinatorApp_ProcessEvent_9:
        MOVX    @DPTR,A
//  271         }
//  272     }
        INC     R2
        MOV     A,R2
        CLR     C
        SUBB    A,#0x64
        JC      ??CoordinatorApp_ProcessEvent_7
//  273     osal_start_timerEx( CoordinatorApp_TaskID,
//  274                               CoordinatorAPP_TICK_ALIVE_MSG_EVT,
//  275                              6000); 
        ; Setup parameters for call to function osal_start_timerEx
        LCALL   ?Subroutine4 & 0xFFFF
//  276   }
//  277   
//  278   //  (the rest event trrigered by change PANID  ).
//  279   if ( events & CoordinatorAPP_REST_MSG_EVT)
??CrossCallReturnLabel_9:
        MOV     A,R6
        ANL     A,#0x2
        JZ      ??CoordinatorApp_ProcessEvent_10
//  280   {
//  281      SystemReset();
        CLR     0xa8.7
        CLR     0xa8.7
        MOV     0xc9,#-0x55
        MOV     0xc9,#0x5b
??CoordinatorApp_ProcessEvent_11:
        SJMP    ??CoordinatorApp_ProcessEvent_11
//  282     //return (events ^ CoordinatorAPP_SEND_PERIODIC_MSG_EVT);
//  283   }
//  284   
//  285   // Discard unknown events
//  286   return 0;
??CoordinatorApp_ProcessEvent_10:
        MOV     R2,#0x0
        MOV     R3,#0x0
??CoordinatorApp_ProcessEvent_6:
        MOV     A,#0x6
        LCALL   ?DEALLOC_XSTACK8
        CFI EndBlock cfiBlock9
        REQUIRE ?Subroutine0
        REQUIRE _A_IEN0
        REQUIRE WDCTL
        ; // Fall through to label ?Subroutine0
//  287 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock10 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock10

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
        CFI Block cfiCond11 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_8
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond12 Using cfiCommon0
        CFI (cfiCond12) NoFunction
        CFI (cfiCond12) Conditional ??CrossCallReturnLabel_9
        CFI (cfiCond12) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond12) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond12) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond12) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond12) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond12) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond12) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond12) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond12) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond12) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond12) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond12) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond12) CFA_SP SP+0
        CFI (cfiCond12) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiPicker13 Using cfiCommon1
        CFI (cfiPicker13) NoFunction
        CFI (cfiPicker13) Picker
        MOV     R4,#0x70
        MOV     R5,#0x17
        MOV     R2,#0x1
        CFI EndBlock cfiCond11
        CFI EndBlock cfiCond12
        CFI EndBlock cfiPicker13
        REQUIRE ??Subroutine6_0
        ; // Fall through to label ??Subroutine6_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine6_0:
        CFI Block cfiCond14 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_10
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond15 Using cfiCommon0
        CFI (cfiCond15) NoFunction
        CFI (cfiCond15) Conditional ??CrossCallReturnLabel_8
        CFI (cfiCond15) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond15) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond15) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond15) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond15) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond15) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond15) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond15) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond15) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond15) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond15) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond15) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond15) CFA_SP SP+0
        CFI (cfiCond15) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond16 Using cfiCommon0
        CFI (cfiCond16) NoFunction
        CFI (cfiCond16) Conditional ??CrossCallReturnLabel_9
        CFI (cfiCond16) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond16) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond16) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond16) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond16) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond16) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond16) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond16) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond16) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond16) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond16) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond16) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond16) CFA_SP SP+0
        CFI (cfiCond16) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiPicker17 Using cfiCommon1
        CFI (cfiPicker17) NoFunction
        CFI (cfiPicker17) Picker
        MOV     R3,#0x0
        MOV     DPTR,#CoordinatorApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
        RET
        CFI EndBlock cfiCond14
        CFI EndBlock cfiCond15
        CFI EndBlock cfiCond16
        CFI EndBlock cfiPicker17

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiCond18 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_2
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond19 Using cfiCommon0
        CFI (cfiCond19) NoFunction
        CFI (cfiCond19) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond19) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond19) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond19) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond19) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond19) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond19) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond19) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond19) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond19) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond19) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond19) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond19) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond19) CFA_SP SP+0
        CFI (cfiCond19) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiPicker20 Using cfiCommon1
        CFI (cfiPicker20) NoFunction
        CFI (cfiPicker20) Picker
        MOV     DPTR,#_NIB + 33
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPTR,#PANID
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
        RET
        CFI EndBlock cfiCond18
        CFI EndBlock cfiCond19
        CFI EndBlock cfiPicker20

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiCond21 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond22 Using cfiCommon0
        CFI (cfiCond22) NoFunction
        CFI (cfiCond22) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond22) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond22) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond22) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond22) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond22) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond22) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond22) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond22) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond22) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond22) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond22) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond22) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond22) CFA_SP SP+0
        CFI (cfiCond22) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiPicker23 Using cfiCommon1
        CFI (cfiPicker23) NoFunction
        CFI (cfiPicker23) Picker
        MOV     A,#AddrList & 0xff
        ADD     A,?V0 + 0
        MOV     R0,A
        MOV     A,#(AddrList >> 8) & 0xff
        ADDC    A,?V0 + 1
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        RET
        CFI EndBlock cfiCond21
        CFI EndBlock cfiCond22
        CFI EndBlock cfiPicker23
//  288 
//  289 
//  290 /*********************************************************************
//  291  * @fn      CoordinatorApp_CMDSerial
//  292  *
//  293  * @brief   Send the message from the UART.
//  294  *
//  295  * @param   none
//  296  *
//  297  * @return  none
//  298  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  299 void CoordinatorApp_CMDSerial(mtOSALSerialData_t * Msg)
CoordinatorApp_CMDSerial:
        CFI Block cfiBlock24 Using cfiCommon0
        CFI Function CoordinatorApp_CMDSerial
        CODE
//  300 {
        FUNCALL CoordinatorApp_CMDSerial, CoordinatorApp_SendBroadcastMessage
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL CoordinatorApp_CMDSerial, NLME_UpdateNV
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL CoordinatorApp_CMDSerial, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL CoordinatorApp_CMDSerial, CoordinatorApp_SendP2PMessage
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
//  301   /***************for the serial use***********************/
//  302  /* uint8 i = 0;
//  303   uint8 SerialDataLen = Msg->msg[0];
//  304   uint8 *str = &(Msg->msg[1]);
//  305   uint8 len = str[0];//get the command data length
//  306   uint8 id = str[1];// get the current id of the device 
//  307   uint8 command = str[2];*/
//  308   
//  309    /***************for the arm use***********************/
//  310  // uint8 i = 0;
//  311   uint8 *str = &(Msg->msg[0]);
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
//  312   uint8 len = str[0];//get the command data length
        MOV     DPL,?V0 + 0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R2,A
//  313   uint8 id = str[1];// get the current id of the device 
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R6,A
//  314   uint8 command = str[2];
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
//  315   CoordinatorApp_P2PDstAddr.addr.shortAddr = AddrList[id].addr;// get the addres of the device id
        MOV     ?V0 + 2,R6
        MOV     ?V0 + 3,#0x0
        MOV     A,#0x2
        MOV     R0,#?V0 + 2
        LCALL   ?S_SHL
        MOV     A,#AddrList & 0xff
        ADD     A,?V0 + 2
        MOV     DPL,A
        MOV     A,#(AddrList >> 8) & 0xff
        ADDC    A,?V0 + 3
        MOV     DPH,A
        LCALL   ??Subroutine5_0 & 0xFFFF
??CrossCallReturnLabel_4:
        MOV     DPTR,#CoordinatorApp_P2PDstAddr
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  316   switch (command)
        MOV     A,R3
        ADD     A,#-0xa
        JNZ     $+5
        LJMP    ??CoordinatorApp_CMDSerial_0 & 0xFFFF
        ADD     A,#-0x6
        JNZ     ??CoordinatorApp_CMDSerial_1
//  317   {
//  318       case CMD_SET_DEVICEID: 
//  319         if(len == 1)
//  320         {
//  321          // DevList[str[3]] = DevList[id];
//  322           //CoordinatorApp_SendP2PMessage(COORDINATOR_COMMAND_CLUSTERID,4,str);
//  323         //  HalUARTWrite(0,(uint8 *)(&DevList[id]),2);
//  324         }
//  325         break;
//  326     case CMD_SET_PANID:
//  327       {
//  328         if(len == 1)
        MOV     A,#0x1
        XRL     A,R2
        JNZ     ??CoordinatorApp_CMDSerial_1
//  329         {
//  330           if(PANID == ((uint16) str[3]));
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     DPH,#(PANID >> 8) & 0xff
        MOV     DPL,#PANID & 0xff
        MOVX    A,@DPTR
        XRL     A,R0
        JNZ     ??CoordinatorApp_CMDSerial_2
        INC     DPTR
        MOVX    A,@DPTR
??CoordinatorApp_CMDSerial_2:
        JZ      ??CoordinatorApp_CMDSerial_3
//  331           else
//  332           {
//  333            PANID = str[3];
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPTR,#PANID
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  334           // tell or the enddevice that the PanId will be changed 
//  335           CoordinatorApp_SendBroadcastMessage(COORDINATOR_COMMAND_CLUSTERID,4,str);
        ; Setup parameters for call to function CoordinatorApp_SendBroadcastMessage
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     R4,#0x4
        MOV     R5,#0x0
        MOV     R2,#0x2
        MOV     R3,#0x0
        LCALL   ??CoordinatorApp_SendBroadcastMessage?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
//  336           _NIB.nwkPanId = PANID;
        MOV     DPTR,#PANID
        LCALL   ??Subroutine5_0 & 0xFFFF
??CrossCallReturnLabel_5:
        MOV     DPTR,#_NIB + 33
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  337           NLME_UpdateNV(0x01);
        ; Setup parameters for call to function NLME_UpdateNV
        MOV     R1,#0x1
        LCALL   ??NLME_UpdateNV?relay
//  338           osal_start_timerEx(CoordinatorApp_TaskID,
//  339                               CoordinatorAPP_REST_MSG_EVT ,
//  340                            CoordinatorAPP_REST_MSG_TIMEOUT);
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#-0x48
        MOV     R5,#0xb
        MOV     R2,#0x2
        LCALL   ??Subroutine6_0 & 0xFFFF
//  341           
//  342            } 
//  343         }
//  344       }
??CrossCallReturnLabel_10:
        SJMP    ??CoordinatorApp_CMDSerial_3
//  345       default:
//  346         if((len == 1) && (id <= DEVICEID_MAX))
??CoordinatorApp_CMDSerial_1:
        MOV     A,#0x1
        XRL     A,R2
        JNZ     ??CoordinatorApp_CMDSerial_0
??CoordinatorApp_CMDSerial_3:
        MOV     A,R6
        CLR     C
        SUBB    A,#0x65
        JNC     ??CoordinatorApp_CMDSerial_0
//  347         CoordinatorApp_SendP2PMessage(COORDINATOR_COMMAND_CLUSTERID,4,str);
        ; Setup parameters for call to function CoordinatorApp_SendP2PMessage
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     R4,#0x4
        MOV     R5,#0x0
        MOV     R2,#0x2
        MOV     R3,#0x0
        LCALL   ??CoordinatorApp_SendP2PMessage?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
//  348         break;
//  349     }
//  350    // for(i = 0; i<SerialDataLen;i++)
//  351    // {
//  352      // HalUARTWrite(0,&str[i],1); 
//  353     //}
//  354 }
??CoordinatorApp_CMDSerial_0:
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock24

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??CoordinatorApp_Init?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    CoordinatorApp_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??CoordinatorApp_ProcessEvent?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    CoordinatorApp_ProcessEvent

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??CoordinatorApp_CMDSerial?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    CoordinatorApp_CMDSerial

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Group 1">`:
        DB "Group 1"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {255, 255, 255, 255}>`:
        DB 255
        DB 255
        DB 255
        DB 255
        DB 0, 0

        END
//  355 
//  356 
//  357 
//  358 
//  359 /*********************************************************************
//  360 
//  361 *********************************************************************/
// 
// 764 bytes in segment BANKED_CODE
//  18 bytes in segment BANK_RELAYS
//   2 bytes in segment SFR_AN
//  14 bytes in segment XDATA_ROM_C
// 
// 782 bytes of CODE  memory
//  14 bytes of CONST memory
//   0 bytes of DATA  memory (+ 2 bytes shared)
//
//Errors: none
//Warnings: none
