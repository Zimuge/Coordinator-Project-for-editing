###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.1.10194/W32 for 8051         20/Apr/2015  13:47:32 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\coor         #
#                          ±∏∑›\Coor for ARM2.0 –ﬁ∏ƒµÿ÷∑±Ìº”»Î±£ªÓº∆ ±∆˜\Proj #
#                          ects\zstack\ZMain\TI2530DB\ZMain.c                 #
#    Command line       =  -f "C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\coor     #
#                          ±∏∑›\Coor for ARM2.0 –ﬁ∏ƒµÿ÷∑±Ìº”»Î±£ªÓº∆ ±∆˜\Proj #
#                          ects\zstack\MyCoordinator\Coordinator\CC2530DB\..\ #
#                          ..\..\Tools\CC2530DB\f8wCoord.cfg" (-DCPU32MHZ     #
#                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRU #
#                          E -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8       #
#                          -DMAC_CFG_RX_MAX=5 -DZDO_COORDINATOR -DRTR_NWK)    #
#                          -f "C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\coor     #
#                          ±∏∑›\Coor for ARM2.0 –ﬁ∏ƒµÿ÷∑±Ìº”»Î±£ªÓº∆ ±∆˜\Proj #
#                          ects\zstack\MyCoordinator\Coordinator\CC2530DB\..\ #
#                          ..\..\Tools\CC2530DB\f8wConfig.cfg" (-DZIGBEEPRO   #
#                          -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR       #
#                          -DDEFAULT_CHANLIST=0x02000000                      #
#                          -DZDAPP_CONFIG_PAN_ID=0x0030                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 "C:\Users\William\Desktop\± #
#                          œ“µ…Ëº∆\SRC\coor ±∏∑›\Coor for ARM2.0              #
#                          –ﬁ∏ƒµÿ÷∑±Ìº”»Î±£ªÓº∆ ±∆˜\Projects\zstack\ZMain\TI2 #
#                          530DB\ZMain.c" -D ZTOOL_P1 -D NV_RESTORE=1 -lC     #
#                          "C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\coor        #
#                          ±∏∑›\Coor for ARM2.0 –ﬁ∏ƒµÿ÷∑±Ìº”»Î±£ªÓº∆ ±∆˜\Proj #
#                          ects\zstack\MyCoordinator\Coordinator\CC2530DB\Coo #
#                          rdinatorEB\List\" -lA "C:\Users\William\Desktop\±œ #
#                          “µ…Ëº∆\SRC\coor ±∏∑›\Coor for ARM2.0               #
#                          –ﬁ∏ƒµÿ÷∑±Ìº”»Î±£ªÓº∆ ±∆˜\Projects\zstack\MyCoordin #
#                          ator\Coordinator\CC2530DB\CoordinatorEB\List\"     #
#                          --diag_suppress Pe001,Pa010 -o                     #
#                          "C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\coor        #
#                          ±∏∑›\Coor for ARM2.0 –ﬁ∏ƒµÿ÷∑±Ìº”»Î±£ªÓº∆ ±∆˜\Proj #
#                          ects\zstack\MyCoordinator\Coordinator\CC2530DB\Coo #
#                          rdinatorEB\Obj\" -e --no_code_motion --debug       #
#                          --core=plain --dptr=16,1 --data_model=large        #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 16 -I "C:\Users\William\Desktop\ #
#                          ±œ“µ…Ëº∆\SRC\coor ±∏∑›\Coor for ARM2.0             #
#                          –ﬁ∏ƒµÿ÷∑±Ìº”»Î±£ªÓº∆ ±∆˜\Projects\zstack\MyCoordin #
#                          ator\Coordinator\CC2530DB\" -I                     #
#                          "C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\coor        #
#                          ±∏∑›\Coor for ARM2.0 –ﬁ∏ƒµÿ÷∑±Ìº”»Î±£ªÓº∆ ±∆˜\Proj #
#                          ects\zstack\MyCoordinator\Coordinator\CC2530DB\..\ #
#                          Source\" -I "C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC #
#                          \coor ±∏∑›\Coor for ARM2.0                         #
#                          –ﬁ∏ƒµÿ÷∑±Ìº”»Î±£ªÓº∆ ±∆˜\Projects\zstack\MyCoordin #
#                          ator\Coordinator\CC2530DB\..\..\..\ZMain\TI2530DB\ #
#                          " -I "C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\coor   #
#                          ±∏∑›\Coor for ARM2.0 –ﬁ∏ƒµÿ÷∑±Ìº”»Î±£ªÓº∆ ±∆˜\Proj #
#                          ects\zstack\MyCoordinator\Coordinator\CC2530DB\..\ #
#                          ..\..\..\..\Components\hal\include\" -I            #
#                          "C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\coor        #
#                          ±∏∑›\Coor for ARM2.0 –ﬁ∏ƒµÿ÷∑±Ìº”»Î±£ªÓº∆ ±∆˜\Proj #
#                          ects\zstack\MyCoordinator\Coordinator\CC2530DB\..\ #
#                          ..\..\..\..\Components\hal\target\CC2530EB\" -I    #
#                          "C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\coor        #
#                          ±∏∑›\Coor for ARM2.0 –ﬁ∏ƒµÿ÷∑±Ìº”»Î±£ªÓº∆ ±∆˜\Proj #
#                          ects\zstack\MyCoordinator\Coordinator\CC2530DB\..\ #
#                          ..\..\..\..\Components\mac\include\" -I            #
#                          "C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\coor        #
#                          ±∏∑›\Coor for ARM2.0 –ﬁ∏ƒµÿ÷∑±Ìº”»Î±£ªÓº∆ ±∆˜\Proj #
#                          ects\zstack\MyCoordinator\Coordinator\CC2530DB\..\ #
#                          ..\..\..\..\Components\mac\high_level\" -I         #
#                          "C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\coor        #
#                          ±∏∑›\Coor for ARM2.0 –ﬁ∏ƒµÿ÷∑±Ìº”»Î±£ªÓº∆ ±∆˜\Proj #
#                          ects\zstack\MyCoordinator\Coordinator\CC2530DB\..\ #
#                          ..\..\..\..\Components\mac\low_level\srf04\" -I    #
#                          "C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\coor        #
#                          ±∏∑›\Coor for ARM2.0 –ﬁ∏ƒµÿ÷∑±Ìº”»Î±£ªÓº∆ ±∆˜\Proj #
#                          ects\zstack\MyCoordinator\Coordinator\CC2530DB\..\ #
#                          ..\..\..\..\Components\mac\low_level\srf04\single_ #
#                          chip\" -I "C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\c #
#                          oor ±∏∑›\Coor for ARM2.0                           #
#                          –ﬁ∏ƒµÿ÷∑±Ìº”»Î±£ªÓº∆ ±∆˜\Projects\zstack\MyCoordin #
#                          ator\Coordinator\CC2530DB\..\..\..\..\..\Component #
#                          s\mt\" -I "C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\c #
#                          oor ±∏∑›\Coor for ARM2.0                           #
#                          –ﬁ∏ƒµÿ÷∑±Ìº”»Î±£ªÓº∆ ±∆˜\Projects\zstack\MyCoordin #
#                          ator\Coordinator\CC2530DB\..\..\..\..\..\Component #
#                          s\osal\include\" -I "C:\Users\William\Desktop\±œ“µ #
#                          …Ëº∆\SRC\coor ±∏∑›\Coor for ARM2.0                 #
#                          –ﬁ∏ƒµÿ÷∑±Ìº”»Î±£ªÓº∆ ±∆˜\Projects\zstack\MyCoordin #
#                          ator\Coordinator\CC2530DB\..\..\..\..\..\Component #
#                          s\services\saddr\" -I "C:\Users\William\Desktop\±œ #
#                          “µ…Ëº∆\SRC\coor ±∏∑›\Coor for ARM2.0               #
#                          –ﬁ∏ƒµÿ÷∑±Ìº”»Î±£ªÓº∆ ±∆˜\Projects\zstack\MyCoordin #
#                          ator\Coordinator\CC2530DB\..\..\..\..\..\Component #
#                          s\services\sdata\" -I "C:\Users\William\Desktop\±œ #
#                          “µ…Ëº∆\SRC\coor ±∏∑›\Coor for ARM2.0               #
#                          –ﬁ∏ƒµÿ÷∑±Ìº”»Î±£ªÓº∆ ±∆˜\Projects\zstack\MyCoordin #
#                          ator\Coordinator\CC2530DB\..\..\..\..\..\Component #
#                          s\stack\af\" -I "C:\Users\William\Desktop\±œ“µ…Ëº∆ #
#                          \SRC\coor ±∏∑›\Coor for ARM2.0                     #
#                          –ﬁ∏ƒµÿ÷∑±Ìº”»Î±£ªÓº∆ ±∆˜\Projects\zstack\MyCoordin #
#                          ator\Coordinator\CC2530DB\..\..\..\..\..\Component #
#                          s\stack\nwk\" -I "C:\Users\William\Desktop\±œ“µ…Ëº #
#                          ∆\SRC\coor ±∏∑›\Coor for ARM2.0                    #
#                          –ﬁ∏ƒµÿ÷∑±Ìº”»Î±£ªÓº∆ ±∆˜\Projects\zstack\MyCoordin #
#                          ator\Coordinator\CC2530DB\..\..\..\..\..\Component #
#                          s\stack\sapi\" -I "C:\Users\William\Desktop\±œ“µ…Ë #
#                          º∆\SRC\coor ±∏∑›\Coor for ARM2.0                   #
#                          –ﬁ∏ƒµÿ÷∑±Ìº”»Î±£ªÓº∆ ±∆˜\Projects\zstack\MyCoordin #
#                          ator\Coordinator\CC2530DB\..\..\..\..\..\Component #
#                          s\stack\sec\" -I "C:\Users\William\Desktop\±œ“µ…Ëº #
#                          ∆\SRC\coor ±∏∑›\Coor for ARM2.0                    #
#                          –ﬁ∏ƒµÿ÷∑±Ìº”»Î±£ªÓº∆ ±∆˜\Projects\zstack\MyCoordin #
#                          ator\Coordinator\CC2530DB\..\..\..\..\..\Component #
#                          s\stack\sys\" -I "C:\Users\William\Desktop\±œ“µ…Ëº #
#                          ∆\SRC\coor ±∏∑›\Coor for ARM2.0                    #
#                          –ﬁ∏ƒµÿ÷∑±Ìº”»Î±£ªÓº∆ ±∆˜\Projects\zstack\MyCoordin #
#                          ator\Coordinator\CC2530DB\..\..\..\..\..\Component #
#                          s\stack\zdo\" -I "C:\Users\William\Desktop\±œ“µ…Ëº #
#                          ∆\SRC\coor ±∏∑›\Coor for ARM2.0                    #
#                          –ﬁ∏ƒµÿ÷∑±Ìº”»Î±£ªÓº∆ ±∆˜\Projects\zstack\MyCoordin #
#                          ator\Coordinator\CC2530DB\..\..\..\..\..\Component #
#                          s\zmac\" -I "C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC #
#                          \coor ±∏∑›\Coor for ARM2.0                         #
#                          –ﬁ∏ƒµÿ÷∑±Ìº”»Î±£ªÓº∆ ±∆˜\Projects\zstack\MyCoordin #
#                          ator\Coordinator\CC2530DB\..\..\..\..\..\Component #
#                          s\zmac\f8w\" -Ohz --require_prototypes             #
#    List file          =  C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\coor         #
#                          ±∏∑›\Coor for ARM2.0 –ﬁ∏ƒµÿ÷∑±Ìº”»Î±£ªÓº∆ ±∆˜\Proj #
#                          ects\zstack\MyCoordinator\Coordinator\CC2530DB\Coo #
#                          rdinatorEB\List\ZMain.lst                          #
#    Object file        =  C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\coor         #
#                          ±∏∑›\Coor for ARM2.0 –ﬁ∏ƒµÿ÷∑±Ìº”»Î±£ªÓº∆ ±∆˜\Proj #
#                          ects\zstack\MyCoordinator\Coordinator\CC2530DB\Coo #
#                          rdinatorEB\Obj\ZMain.r51                           #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\coor ±∏∑›\Coor for ARM2.0 –ﬁ∏ƒµÿ÷∑±Ìº”»Î±£ªÓº∆ ±∆˜\Projects\zstack\ZMain\TI2530DB\ZMain.c
      1          /**************************************************************************************************
      2            Filename:       ZMain.c
      3            Revised:        $Date: 2010-09-17 16:25:30 -0700 (Fri, 17 Sep 2010) $
      4            Revision:       $Revision: 23835 $
      5          
      6            Description:    Startup and shutdown code for ZStack
      7            Notes:          This version targets the Chipcon CC2530
      8          
      9          
     10            Copyright 2005-2010 Texas Instruments Incorporated. All rights reserved.
     11          
     12            IMPORTANT: Your use of this Software is limited to those specific rights
     13            granted under the terms of a software license agreement between the user
     14            who downloaded the software, his/her employer (which must be your employer)
     15            and Texas Instruments Incorporated (the "License").  You may not use this
     16            Software unless you agree to abide by the terms of the License. The License
     17            limits your use, and you acknowledge, that the Software may not be modified,
     18            copied or distributed unless embedded on a Texas Instruments microcontroller
     19            or used solely and exclusively in conjunction with a Texas Instruments radio
     20            frequency transceiver, which is integrated into your product.  Other than for
     21            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     22            works of, modify, distribute, perform, display or sell this Software and/or
     23            its documentation for any purpose.
     24          
     25            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     26            PROVIDED ìAS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     27            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     28            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     29            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     30            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     31            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     32            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     33            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     34            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     35            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     36          
     37            Should you have any questions regarding your right to use this Software,
     38            contact Texas Instruments Incorporated at www.TI.com.
     39          **************************************************************************************************/
     40          
     41          /*********************************************************************
     42           * INCLUDES
     43           */
     44          
     45          #ifndef NONWK
     46          #include "AF.h"
     47          #endif
     48          #include "hal_adc.h"

   \                                 In  segment SFR_AN, at 0x8f
   \   unsigned char volatile __sfr P0INP
   \                     P0INP:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x9d
   \   unsigned char volatile __sfr SLEEPSTA
   \                     SLEEPSTA:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x9e
   \   unsigned char volatile __sfr CLKCONSTA
   \                     CLKCONSTA:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xbe
   \   unsigned char volatile __sfr SLEEPCMD
   \                     SLEEPCMD:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc6
   \   unsigned char volatile __sfr CLKCONCMD
   \                     CLKCONCMD:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfd
   \   unsigned char volatile __sfr P0DIR
   \                     P0DIR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfe
   \   unsigned char volatile __sfr P1DIR
   \                     P1DIR:
   \   000000                DS 1
     49          #include "hal_flash.h"
     50          #include "hal_drivers.h"
     51          #include "OnBoard.h"
     52          #include "OSAL.h"
     53          #include "OSAL_Nv.h"
     54          #include "ZComDef.h"
     55          #include "ZMAC.h"
     56          
     57          /*********************************************************************
     58           * LOCAL FUNCTIONS
     59           */
     60          
     61          static void zmain_ext_addr( void );
     62          #if defined ZCL_KEY_ESTABLISH
     63          static void zmain_cert_init( void );
     64          #endif
     65          static void zmain_dev_info( void );
     66          static void zmain_vdd_check( void );
     67          
     68          /*********************************************************************
     69           * @fn      main
     70           * @brief   First function called after startup.
     71           * @return  don't care
     72           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     73          int main( void )
   \                     main:
     74          {
   \   000000                ; Auto size: 0
     75            // Turn off interrupts
     76            osal_int_disable( INTS_ALL );
   \   000000                ; Setup parameters for call to function osal_int_disable
   \   000000   79FF         MOV     R1,#-0x1
   \   000002   12....       LCALL   ??osal_int_disable?relay
     77          
     78            // Initialization for board related stuff such as LEDs
     79            HAL_BOARD_INIT();
   \   000005   53BEFB       ANL     0xbe,#0xfb
   \                     ??main_0:
   \   000008   E59D         MOV     A,0x9d
   \   00000A   A2E6         MOV     C,0xE0 /* A   */.6
   \   00000C   50FA         JNC     ??main_0
   \   00000E   00           NOP
   \   00000F   78F8         MOV     R0,#-0x8
   \   000011   7901         MOV     R1,#0x1
   \                     ??main_1:
   \   000013   00           NOP
   \   000014   E8           MOV     A,R0
   \   000015   24FF         ADD     A,#-0x1
   \   000017   18           DEC     R0
   \   000018   E9           MOV     A,R1
   \   000019   34FF         ADDC    A,#-0x1
   \   00001B   F9           MOV     R1,A
   \   00001C   E8           MOV     A,R0
   \   00001D   49           ORL     A,R1
   \   00001E   70F3         JNZ     ??main_1
   \   000020   75C600       MOV     0xc6,#0x0
   \                     ??main_2:
   \   000023   E59E         MOV     A,0x9e
   \   000025   70FC         JNZ     ??main_2
   \   000027   43BE04       ORL     0xbe,#0x4
   \   00002A   906270       MOV     DPTR,#0x6270
   \   00002D   7408         MOV     A,#0x8
   \   00002F   F0           MOVX    @DPTR,A
   \   000030   43FE01       ORL     0xfe,#0x1
   \   000033   43FD80       ORL     0xfd,#0x80
   \   000036   438F01       ORL     0x8f,#0x1
   \   000039                ; Setup parameters for call to function MAC_RfFrontendSetup
   \   000039   12....       LCALL   ??MAC_RfFrontendSetup?relay
     80          
     81            // Make sure supply voltage is high enough to run
     82            zmain_vdd_check();
   \   00003C   7E10         MOV     R6,#0x10
   \                     ??main_3:
   \   00003E                ; Setup parameters for call to function HalAdcCheckVdd
   \   00003E   794A         MOV     R1,#0x4a
   \   000040   12....       LCALL   ??HalAdcCheckVdd?relay
   \   000043   E9           MOV     A,R1
   \   000044   60F8         JZ      ??main_3
   \   000046   1E           DEC     R6
   \   000047   EE           MOV     A,R6
   \   000048   70F4         JNZ     ??main_3
     83          
     84            // Initialize board I/O
     85            InitBoard( OB_COLD );
   \   00004A                ; Setup parameters for call to function InitBoard
   \   00004A   7900         MOV     R1,#0x0
   \   00004C   12....       LCALL   ??InitBoard?relay
     86          
     87            // Initialze HAL drivers
     88            HalDriverInit();
   \   00004F                ; Setup parameters for call to function HalDriverInit
   \   00004F   12....       LCALL   ??HalDriverInit?relay
     89          
     90            // Initialize NV System
     91            osal_nv_init( NULL );
   \   000052                ; Setup parameters for call to function osal_nv_init
   \   000052   7A00         MOV     R2,#0x0
   \   000054   7B00         MOV     R3,#0x0
   \   000056   12....       LCALL   ??osal_nv_init?relay
     92          
     93            // Initialize the MAC
     94            ZMacInit();
   \   000059                ; Setup parameters for call to function ZMacInit
   \   000059   12....       LCALL   ??ZMacInit?relay
     95          
     96            // Determine the extended address
     97            zmain_ext_addr();
   \   00005C                ; Setup parameters for call to function zmain_ext_addr
   \   00005C   12....       LCALL   ??zmain_ext_addr?relay
     98          
     99          #if defined ZCL_KEY_ESTABLISH
    100            // Initialize the Certicom certificate information.
    101            zmain_cert_init();
    102          #endif
    103          
    104            // Initialize basic NV items
    105            zgInit();
   \   00005F                ; Setup parameters for call to function zgInit
   \   00005F   12....       LCALL   ??zgInit?relay
    106          
    107          #ifndef NONWK
    108            // Since the AF isn't a task, call it's initialization routine
    109            afInit();
    110          #endif
    111          
    112            // Initialize the operating system
    113            osal_init_system();
   \   000062                ; Setup parameters for call to function osal_init_system
   \   000062   12....       LCALL   ??osal_init_system?relay
    114          
    115            // Allow interrupts
    116            osal_int_enable( INTS_ALL );
   \   000065                ; Setup parameters for call to function osal_int_enable
   \   000065   79FF         MOV     R1,#-0x1
   \   000067   12....       LCALL   ??osal_int_enable?relay
    117          
    118            // Final board initialization
    119            InitBoard( OB_READY );
   \   00006A                ; Setup parameters for call to function InitBoard
   \   00006A   7902         MOV     R1,#0x2
   \   00006C   12....       LCALL   ??InitBoard?relay
    120          
    121            // Display information about this device
    122            zmain_dev_info();
    123          
    124            /* Display the device info on the LCD */
    125          
    126          #ifdef WDT_IN_PM1
    127            /* If WDT is used, this is a good place to enable it. */
    128            WatchDogEnable( WDTIMX );
    129          #endif
    130          
    131            osal_start_system(); // No Return from here
   \   00006F                ; Setup parameters for call to function osal_start_system
   \   00006F   12....       LCALL   ??osal_start_system?relay
    132          
    133            return 0;  // Shouldn't get here.
   \   000072   7A00         MOV     R2,#0x0
   \   000074   7B00         MOV     R3,#0x0
   \   000076   02....       LJMP    ?BRET
   \   000079                REQUIRE SLEEPCMD
   \   000079                REQUIRE SLEEPSTA
   \   000079                REQUIRE CLKCONCMD
   \   000079                REQUIRE CLKCONSTA
   \   000079                REQUIRE P1DIR
   \   000079                REQUIRE P0DIR
   \   000079                REQUIRE P0INP
    134          } // main()
    135          
    136          /*********************************************************************
    137           * @fn      zmain_vdd_check
    138           * @brief   Check if the Vdd is OK to run the processor.
    139           * @return  Return if Vdd is ok; otherwise, flash LED, then reset
    140           *********************************************************************/
    141          static void zmain_vdd_check( void )
    142          {
    143            uint8 cnt = 16;
    144            
    145            do {
    146              while (!HalAdcCheckVdd(VDD_MIN_RUN));
    147            } while (--cnt);
    148          }
    149          
    150          /**************************************************************************************************
    151           * @fn          zmain_ext_addr
    152           *
    153           * @brief       Execute a prioritized search for a valid extended address and write the results
    154           *              into the OSAL NV system for use by the system. Temporary address not saved to NV.
    155           *
    156           * input parameters
    157           *
    158           * None.
    159           *
    160           * output parameters
    161           *
    162           * None.
    163           *
    164           * @return      None.
    165           **************************************************************************************************
    166           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    167          static void zmain_ext_addr(void)
   \                     zmain_ext_addr:
    168          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV     A,#-0x8
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    169            uint8 nullAddr[Z_EXTADDR_LEN] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   AC82         MOV     R4,DPL
   \   000012   AD83         MOV     R5,DPH
   \   000014   7583..       MOV     DPH,#(`?<Constant {255, 255, 255, 255, 255, 255, 255,` >> 8) & 0xff
   \   000017   7582..       MOV     DPL,#`?<Constant {255, 255, 255, 255, 255, 255, 255,` & 0xff
   \   00001A   7408         MOV     A,#0x8
   \   00001C   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    170            uint8 writeNV = TRUE;
    171          
    172            // First check whether a non-erased extended address exists in the OSAL NV.
    173            if ((SUCCESS != osal_nv_item_init(ZCD_NV_EXTADDR, Z_EXTADDR_LEN, NULL))  ||
    174                (SUCCESS != osal_nv_read(ZCD_NV_EXTADDR, 0, Z_EXTADDR_LEN, aExtendedAddress)) ||
    175                (osal_memcmp(aExtendedAddress, nullAddr, Z_EXTADDR_LEN)))
   \   00001F                ; Setup parameters for call to function osal_nv_item_init
   \   00001F   F5..         MOV     ?V0 + 0,A
   \   000021   F5..         MOV     ?V0 + 1,A
   \   000023   78..         MOV     R0,#?V0 + 0
   \   000025   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000028   7C08         MOV     R4,#0x8
   \   00002A   7D00         MOV     R5,#0x0
   \   00002C   7A01         MOV     R2,#0x1
   \   00002E   7B00         MOV     R3,#0x0
   \   000030   12....       LCALL   ??osal_nv_item_init?relay
   \   000033   7402         MOV     A,#0x2
   \   000035   12....       LCALL   ?DEALLOC_XSTACK8
   \   000038   E9           MOV     A,R1
   \   000039   7057         JNZ     ??zmain_ext_addr_0
   \   00003B                ; Setup parameters for call to function osal_nv_read
   \   00003B   75....       MOV     ?V0 + 0,#aExtendedAddress & 0xff
   \   00003E   75....       MOV     ?V0 + 1,#(aExtendedAddress >> 8) & 0xff
   \   000041   78..         MOV     R0,#?V0 + 0
   \   000043   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000046   75..08       MOV     ?V0 + 0,#0x8
   \   000049   75..00       MOV     ?V0 + 1,#0x0
   \   00004C   78..         MOV     R0,#?V0 + 0
   \   00004E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000051   7C00         MOV     R4,#0x0
   \   000053   7D00         MOV     R5,#0x0
   \   000055   7A01         MOV     R2,#0x1
   \   000057   7B00         MOV     R3,#0x0
   \   000059   12....       LCALL   ??osal_nv_read?relay
   \   00005C   7404         MOV     A,#0x4
   \   00005E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000061   E9           MOV     A,R1
   \   000062   702E         JNZ     ??zmain_ext_addr_0
   \   000064                ; Setup parameters for call to function osal_memcmp
   \   000064   85..82       MOV     DPL,?XSP + 0
   \   000067   85..83       MOV     DPH,?XSP + 1
   \   00006A   A982         MOV     R1,DPL
   \   00006C   AA83         MOV     R2,DPH
   \   00006E   89..         MOV     ?V0 + 0,R1
   \   000070   8A..         MOV     ?V0 + 1,R2
   \   000072   75..00       MOV     ?V0 + 2,#0x0
   \   000075   78..         MOV     R0,#?V0 + 0
   \   000077   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00007A   7C08         MOV     R4,#0x8
   \   00007C   7D00         MOV     R5,#0x0
   \   00007E   79..         MOV     R1,#aExtendedAddress & 0xff
   \   000080   7A..         MOV     R2,#(aExtendedAddress >> 8) & 0xff
   \   000082   7B00         MOV     R3,#0x0
   \   000084   12....       LCALL   ??osal_memcmp?relay
   \   000087   7403         MOV     A,#0x3
   \   000089   12....       LCALL   ?DEALLOC_XSTACK8
   \   00008C   E9           MOV     A,R1
   \   00008D   7003         JNZ     $+5
   \   00008F   02....       LJMP    ??zmain_ext_addr_1 & 0xFFFF
    176            {
    177              // Attempt to read the extended address from the location on the lock bits page
    178              // where the programming tools know to reserve it.
    179              HalFlashRead(HAL_FLASH_IEEE_PAGE, HAL_FLASH_IEEE_OSET, aExtendedAddress, Z_EXTADDR_LEN);
   \                     ??zmain_ext_addr_0:
   \   000092                ; Setup parameters for call to function HalFlashRead
   \   000092   75..08       MOV     ?V0 + 0,#0x8
   \   000095   75..00       MOV     ?V0 + 1,#0x0
   \   000098   78..         MOV     R0,#?V0 + 0
   \   00009A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00009D   7C..         MOV     R4,#aExtendedAddress & 0xff
   \   00009F   7D..         MOV     R5,#(aExtendedAddress >> 8) & 0xff
   \   0000A1   7AE8         MOV     R2,#-0x18
   \   0000A3   7B07         MOV     R3,#0x7
   \   0000A5   797F         MOV     R1,#0x7f
   \   0000A7   12....       LCALL   ??HalFlashRead?relay
   \   0000AA   7402         MOV     A,#0x2
   \   0000AC   12....       LCALL   ?DEALLOC_XSTACK8
    180          
    181              if (osal_memcmp(aExtendedAddress, nullAddr, Z_EXTADDR_LEN))
   \   0000AF                ; Setup parameters for call to function osal_memcmp
   \   0000AF   85..82       MOV     DPL,?XSP + 0
   \   0000B2   85..83       MOV     DPH,?XSP + 1
   \   0000B5   A982         MOV     R1,DPL
   \   0000B7   AA83         MOV     R2,DPH
   \   0000B9   89..         MOV     ?V0 + 0,R1
   \   0000BB   8A..         MOV     ?V0 + 1,R2
   \   0000BD   75..00       MOV     ?V0 + 2,#0x0
   \   0000C0   78..         MOV     R0,#?V0 + 0
   \   0000C2   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000C5   7C08         MOV     R4,#0x8
   \   0000C7   7D00         MOV     R5,#0x0
   \   0000C9   79..         MOV     R1,#aExtendedAddress & 0xff
   \   0000CB   7A..         MOV     R2,#(aExtendedAddress >> 8) & 0xff
   \   0000CD   7B00         MOV     R3,#0x0
   \   0000CF   12....       LCALL   ??osal_memcmp?relay
   \   0000D2   7403         MOV     A,#0x3
   \   0000D4   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000D7   E9           MOV     A,R1
   \   0000D8   606A         JZ      ??zmain_ext_addr_2
    182              {
    183                // Attempt to read the extended address from the designated location in the Info Page.
    184                if (!osal_memcmp((uint8 *)(P_INFOPAGE+HAL_INFOP_IEEE_OSET), nullAddr, Z_EXTADDR_LEN))
   \   0000DA                ; Setup parameters for call to function osal_memcmp
   \   0000DA   78..         MOV     R0,#?V0 + 0
   \   0000DC   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000DF   7C08         MOV     R4,#0x8
   \   0000E1   7D00         MOV     R5,#0x0
   \   0000E3   790C         MOV     R1,#0xc
   \   0000E5   7A78         MOV     R2,#0x78
   \   0000E7   7B00         MOV     R3,#0x0
   \   0000E9   12....       LCALL   ??osal_memcmp?relay
   \   0000EC   7403         MOV     A,#0x3
   \   0000EE   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000F1   E9           MOV     A,R1
   \   0000F2   701D         JNZ     ??zmain_ext_addr_3
    185                {
    186                  osal_memcpy(aExtendedAddress, (uint8 *)(P_INFOPAGE+HAL_INFOP_IEEE_OSET), Z_EXTADDR_LEN);
   \   0000F4                ; Setup parameters for call to function osal_memcpy
   \   0000F4   75..0C       MOV     ?V0 + 0,#0xc
   \   0000F7   75..78       MOV     ?V0 + 1,#0x78
   \   0000FA   78..         MOV     R0,#?V0 + 0
   \   0000FC   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000FF   7C08         MOV     R4,#0x8
   \   000101   7D00         MOV     R5,#0x0
   \   000103   7A..         MOV     R2,#aExtendedAddress & 0xff
   \   000105   7B..         MOV     R3,#(aExtendedAddress >> 8) & 0xff
   \   000107   12....       LCALL   ??osal_memcpy?relay
   \   00010A   7403         MOV     A,#0x3
   \   00010C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00010F   8033         SJMP    ??zmain_ext_addr_2
    187                }
    188                else  // No valid extended address was found.
    189                {
    190                  uint8 idx;
    191                  
    192          #if !defined ( NV_RESTORE )
    193                  writeNV = FALSE;  // Make this a temporary IEEE address
    194          #endif
    195          
    196                  /* Attempt to create a sufficiently random extended address for expediency.
    197                   * Note: this is only valid/legal in a test environment and
    198                   *       must never be used for a commercial product.
    199                   */
    200                  for (idx = 0; idx < (Z_EXTADDR_LEN - 2);)
   \                     ??zmain_ext_addr_3:
   \   000111   7E00         MOV     R6,#0x0
    201                  {
    202                    uint16 randy = osal_rand();
   \                     ??zmain_ext_addr_4:
   \   000113                ; Setup parameters for call to function osal_rand
   \   000113   12....       LCALL   ??osal_rand?relay
   \   000116   8A..         MOV     ?V0 + 0,R2
   \   000118   A8..         MOV     R0,?V0 + 0
    203                    aExtendedAddress[idx++] = LO_UINT16(randy);
   \   00011A   12....       LCALL   ?Subroutine0 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   00011D   E8           MOV     A,R0
   \   00011E   F0           MOVX    @DPTR,A
   \   00011F   0E           INC     R6
    204                    aExtendedAddress[idx++] = HI_UINT16(randy);
   \   000120   12....       LCALL   ?Subroutine0 & 0xFFFF
    205                  }
   \                     ??CrossCallReturnLabel_1:
   \   000123   EB           MOV     A,R3
   \   000124   F0           MOVX    @DPTR,A
   \   000125   0E           INC     R6
   \   000126   EE           MOV     A,R6
   \   000127   C3           CLR     C
   \   000128   9406         SUBB    A,#0x6
   \   00012A   40E7         JC      ??zmain_ext_addr_4
    206                  // Next-to-MSB identifies ZigBee devicetype.
    207          #if ZG_BUILD_COORDINATOR_TYPE && !ZG_BUILD_JOINING_TYPE
    208                  aExtendedAddress[idx++] = 0x10;
   \   00012C   12....       LCALL   ?Subroutine0 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   00012F   7410         MOV     A,#0x10
   \   000131   F0           MOVX    @DPTR,A
    209          #elif ZG_BUILD_RTRONLY_TYPE
    210                  aExtendedAddress[idx++] = 0x20;
    211          #else
    212                  aExtendedAddress[idx++] = 0x30;
    213          #endif
    214                  // MSB has historical signficance.
    215                  aExtendedAddress[idx] = 0xF8;
   \   000132   7401         MOV     A,#0x1
   \   000134   2E           ADD     A,R6
   \   000135   F8           MOV     R0,A
   \   000136   74..         MOV     A,#aExtendedAddress & 0xff
   \   000138   28           ADD     A,R0
   \   000139   F582         MOV     DPL,A
   \   00013B   74..         MOV     A,#(aExtendedAddress >> 8) & 0xff
   \   00013D   3400         ADDC    A,#0x0
   \   00013F   F583         MOV     DPH,A
   \   000141   74F8         MOV     A,#-0x8
   \   000143   F0           MOVX    @DPTR,A
    216                }
    217              }
    218          
    219              if (writeNV)
    220              {
    221                (void)osal_nv_write(ZCD_NV_EXTADDR, 0, Z_EXTADDR_LEN, aExtendedAddress);
   \                     ??zmain_ext_addr_2:
   \   000144                ; Setup parameters for call to function osal_nv_write
   \   000144   75....       MOV     ?V0 + 0,#aExtendedAddress & 0xff
   \   000147   75....       MOV     ?V0 + 1,#(aExtendedAddress >> 8) & 0xff
   \   00014A   78..         MOV     R0,#?V0 + 0
   \   00014C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00014F   75..08       MOV     ?V0 + 0,#0x8
   \   000152   75..00       MOV     ?V0 + 1,#0x0
   \   000155   78..         MOV     R0,#?V0 + 0
   \   000157   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00015A   7C00         MOV     R4,#0x0
   \   00015C   7D00         MOV     R5,#0x0
   \   00015E   7A01         MOV     R2,#0x1
   \   000160   7B00         MOV     R3,#0x0
   \   000162   12....       LCALL   ??osal_nv_write?relay
   \   000165   7404         MOV     A,#0x4
   \   000167   12....       LCALL   ?DEALLOC_XSTACK8
    222              }
    223            }
    224          
    225            // Set the MAC PIB extended address according to results from above.
    226            (void)ZMacSetReq(MAC_EXTENDED_ADDRESS, aExtendedAddress);
   \                     ??zmain_ext_addr_1:
   \   00016A                ; Setup parameters for call to function ZMacSetReq
   \   00016A   7A..         MOV     R2,#aExtendedAddress & 0xff
   \   00016C   7B..         MOV     R3,#(aExtendedAddress >> 8) & 0xff
   \   00016E   79E2         MOV     R1,#-0x1e
   \   000170   12....       LCALL   ??ZMacSetReq?relay
    227          }
   \   000173   7408         MOV     A,#0x8
   \   000175   12....       LCALL   ?DEALLOC_XSTACK8
   \   000178   7F03         MOV     R7,#0x3
   \   00017A   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   8E..         MOV     ?V0 + 0,R6
   \   000002   74..         MOV     A,#aExtendedAddress & 0xff
   \   000004   25..         ADD     A,?V0 + 0
   \   000006   F582         MOV     DPL,A
   \   000008   74..         MOV     A,#(aExtendedAddress >> 8) & 0xff
   \   00000A   3400         ADDC    A,#0x0
   \   00000C   F583         MOV     DPH,A
   \   00000E   22           RET

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??main?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    main

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zmain_ext_addr?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zmain_ext_addr

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {255, 255, 255, 255, 255, 255, 255,`:
   \   000000   FF           DB 255
   \   000001   FF           DB 255
   \   000002   FF           DB 255
   \   000003   FF           DB 255
   \   000004   FF           DB 255
   \   000005   FF           DB 255
   \   000006   FF           DB 255
   \   000007   FF           DB 255
    228          
    229          #if defined ZCL_KEY_ESTABLISH
    230          /**************************************************************************************************
    231           * @fn          zmain_cert_init
    232           *
    233           * @brief       Initialize the Certicom certificate information.
    234           *
    235           * input parameters
    236           *
    237           * None.
    238           *
    239           * output parameters
    240           *
    241           * None.
    242           *
    243           * @return      None.
    244           **************************************************************************************************
    245           */
    246          static void zmain_cert_init(void)
    247          {
    248            uint8 certData[ZCL_KE_IMPLICIT_CERTIFICATE_LEN];
    249            uint8 nullData[ZCL_KE_IMPLICIT_CERTIFICATE_LEN] = {
    250              0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    251              0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    252              0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    253              0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    254              0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    255              0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
    256            };
    257          
    258            (void)osal_nv_item_init(ZCD_NV_IMPLICIT_CERTIFICATE, ZCL_KE_IMPLICIT_CERTIFICATE_LEN, NULL);
    259            (void)osal_nv_item_init(ZCD_NV_DEVICE_PRIVATE_KEY, ZCL_KE_DEVICE_PRIVATE_KEY_LEN, NULL);
    260          
    261            // First check whether non-null certificate data exists in the OSAL NV. To save on code space,
    262            // just use the ZCD_NV_CA_PUBLIC_KEY as the bellwether for all three.
    263            if ((SUCCESS != osal_nv_item_init(ZCD_NV_CA_PUBLIC_KEY, ZCL_KE_CA_PUBLIC_KEY_LEN, NULL))    ||
    264                (SUCCESS != osal_nv_read(ZCD_NV_CA_PUBLIC_KEY, 0, ZCL_KE_CA_PUBLIC_KEY_LEN, certData))  ||
    265                (osal_memcmp(certData, nullData, ZCL_KE_CA_PUBLIC_KEY_LEN)))
    266            {
    267              // Attempt to read the certificate data from its corresponding location on the lock bits page.
    268              HalFlashRead(HAL_FLASH_IEEE_PAGE, HAL_FLASH_CA_PUBLIC_KEY_OSET, certData,
    269                                                   ZCL_KE_CA_PUBLIC_KEY_LEN);
    270              // If the certificate data is not NULL, use it to update the corresponding NV items.
    271              if (!osal_memcmp(certData, nullData, ZCL_KE_CA_PUBLIC_KEY_LEN))
    272              {
    273                (void)osal_nv_write(ZCD_NV_CA_PUBLIC_KEY, 0, ZCL_KE_CA_PUBLIC_KEY_LEN, certData);
    274                HalFlashRead(HAL_FLASH_IEEE_PAGE, HAL_FLASH_IMPLICIT_CERT_OSET, certData,
    275                                                     ZCL_KE_IMPLICIT_CERTIFICATE_LEN);
    276                (void)osal_nv_write(ZCD_NV_IMPLICIT_CERTIFICATE, 0,
    277                                    ZCL_KE_IMPLICIT_CERTIFICATE_LEN, certData);
    278                HalFlashRead(HAL_FLASH_IEEE_PAGE, HAL_FLASH_DEV_PRIVATE_KEY_OSET, certData,
    279                                                  ZCL_KE_DEVICE_PRIVATE_KEY_LEN);
    280                (void)osal_nv_write(ZCD_NV_DEVICE_PRIVATE_KEY, 0, ZCL_KE_DEVICE_PRIVATE_KEY_LEN, certData);
    281              }
    282            }
    283          }
    284          #endif
    285          
    286          /**************************************************************************************************
    287           * @fn          zmain_dev_info
    288           *
    289           * @brief       This displays the IEEE (MSB to LSB) on the LCD.
    290           *
    291           * input parameters
    292           *
    293           * None.
    294           *
    295           * output parameters
    296           *
    297           * None.
    298           *
    299           * @return      None.
    300           **************************************************************************************************
    301           */
    302          static void zmain_dev_info(void)
    303          {
    304          #ifdef LCD_SUPPORTED
    305            uint8 i;
    306            uint8 *xad;
    307            uint8 lcd_buf[Z_EXTADDR_LEN*2+1];
    308          
    309            // Display the extended address.
    310            xad = aExtendedAddress + Z_EXTADDR_LEN - 1;
    311          
    312            for (i = 0; i < Z_EXTADDR_LEN*2; xad--)
    313            {
    314              uint8 ch;
    315              ch = (*xad >> 4) & 0x0F;
    316              lcd_buf[i++] = ch + (( ch < 10 ) ? '0' : '7');
    317              ch = *xad & 0x0F;
    318              lcd_buf[i++] = ch + (( ch < 10 ) ? '0' : '7');
    319            }
    320            lcd_buf[Z_EXTADDR_LEN*2] = '\0';
    321            HalLcdWriteString( "IEEE: ", HAL_LCD_LINE_1 );
    322            HalLcdWriteString( (char*)lcd_buf, HAL_LCD_LINE_2 );
    323          #endif
    324          }
    325          
    326          #ifdef LCD_SUPPORTED
    327          /*********************************************************************
    328           * @fn      zmain_lcd_init
    329           * @brief   Initialize LCD at start up.
    330           * @return  none
    331           *********************************************************************/
    332          static void zmain_lcd_init ( void )
    333          {
    334          #ifdef SERIAL_DEBUG_SUPPORTED
    335            {
    336              HalLcdWriteString( "TexasInstruments", HAL_LCD_LINE_1 );
    337          
    338          #if defined( MT_MAC_FUNC )
    339          #if defined( ZDO_COORDINATOR )
    340                HalLcdWriteString( "MAC-MT Coord", HAL_LCD_LINE_2 );
    341          #else
    342                HalLcdWriteString( "MAC-MT Device", HAL_LCD_LINE_2 );
    343          #endif // ZDO
    344          #elif defined( MT_NWK_FUNC )
    345          #if defined( ZDO_COORDINATOR )
    346                HalLcdWriteString( "NWK Coordinator", HAL_LCD_LINE_2 );
    347          #else
    348                HalLcdWriteString( "NWK Device", HAL_LCD_LINE_2 );
    349          #endif // ZDO
    350          #endif // MT_FUNC
    351            }
    352          #endif // SERIAL_DEBUG_SUPPORTED
    353          }
    354          #endif
    355          
    356          /*********************************************************************
    357          *********************************************************************/

   Maximum stack usage in bytes:

     Function                 ISTACK PSTACK XSTACK
     --------                 ------ ------ ------
     main                         0      0      0
       -> osal_int_disable        0      0      0
       -> MAC_RfFrontendSetup     0      0      0
       -> HalAdcCheckVdd          0      0      0
       -> InitBoard               0      0      0
       -> HalDriverInit           0      0      0
       -> osal_nv_init            0      0      0
       -> ZMacInit                0      0      0
       -> zmain_ext_addr          0      0      0
       -> zgInit                  0      0      0
       -> osal_init_system        0      0      0
       -> osal_int_enable         0      0      0
       -> InitBoard               0      0      0
       -> osal_start_system       0      0      0
     zmain_ext_addr               2      0     23
       -> osal_nv_item_init       0      0     42
       -> osal_nv_read            0      0     46
       -> osal_memcmp             0      0     44
       -> HalFlashRead            0      0     42
       -> osal_memcmp             0      0     44
       -> osal_memcmp             0      0     44
       -> osal_memcpy             0      0     44
       -> osal_rand               0      0     38
       -> osal_nv_write           0      0     46
       -> ZMacSetReq              0      0     38


   Segment part sizes:

     Function/Label                                 Bytes
     --------------                                 -----
     P0INP                                             1
     SLEEPSTA                                          1
     CLKCONSTA                                         1
     SLEEPCMD                                          1
     CLKCONCMD                                         1
     P0DIR                                             1
     P1DIR                                             1
     main                                            121
     zmain_ext_addr                                  381
     ?Subroutine0                                     15
     ??main?relay                                      6
     ??zmain_ext_addr?relay                            6
     ?<Constant {255, 255, 255, 255, 255, 255, 255,    8

 
 517 bytes in segment BANKED_CODE
  12 bytes in segment BANK_RELAYS
   7 bytes in segment SFR_AN
   8 bytes in segment XDATA_ROM_C
 
 529 bytes of CODE  memory
   8 bytes of CONST memory
   0 bytes of DATA  memory (+ 7 bytes shared)

Errors: none
Warnings: none
