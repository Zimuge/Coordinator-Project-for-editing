###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.1.10194/W32 for 8051         20/Apr/2015  13:47:25 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\coor         #
#                          ±∏∑›\Coor for ARM2.0 –ﬁ∏ƒµÿ÷∑±Ìº”»Î±£ªÓº∆ ±∆˜\Proj #
#                          ects\zstack\ZMain\TI2530DB\OnBoard.c               #
#    Command line       =  -f "C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\coor     #
#                          ±∏∑›\Coor for ARM2.0 –ﬁ∏ƒµÿ÷∑±Ìº”»Î±£ªÓº∆ ±∆˜\Proj #
#                          ects\zstack\MyCoordinator\Coordinator\CC2530DB\..\ #
#                          ..\..\Tools\CC2530DB\f8wCoord.cfg" (-DCPU32MHZ     #
#                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRU #
#                          E -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8       #
#                          -DMAC_CFG_RX_MAX=5 -DZDO_COORDINATOR -DRTR_NWK)    #
#                          -f "C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\coor     #
#                          ±∏∑›\Coor for ARM2.0 –ﬁ∏ƒµÿ÷∑±Ìº”»Î±£ªÓº∆ ±∆˜\Proj #
#                          ects\zstack\MyCoordinator\Coordinator\CC2530DB\..\ #
#                          ..\..\Tools\CC2530DB\f8wConfig.cfg" (-DZIGBEEPRO   #
#                          -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR       #
#                          -DDEFAULT_CHANLIST=0x02000000                      #
#                          -DZDAPP_CONFIG_PAN_ID=0x0030                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 "C:\Users\William\Desktop\± #
#                          œ“µ…Ëº∆\SRC\coor ±∏∑›\Coor for ARM2.0              #
#                          –ﬁ∏ƒµÿ÷∑±Ìº”»Î±£ªÓº∆ ±∆˜\Projects\zstack\ZMain\TI2 #
#                          530DB\OnBoard.c" -D ZTOOL_P1 -D NV_RESTORE=1 -lC   #
#                          "C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\coor        #
#                          ±∏∑›\Coor for ARM2.0 –ﬁ∏ƒµÿ÷∑±Ìº”»Î±£ªÓº∆ ±∆˜\Proj #
#                          ects\zstack\MyCoordinator\Coordinator\CC2530DB\Coo #
#                          rdinatorEB\List\" -lA "C:\Users\William\Desktop\±œ #
#                          “µ…Ëº∆\SRC\coor ±∏∑›\Coor for ARM2.0               #
#                          –ﬁ∏ƒµÿ÷∑±Ìº”»Î±£ªÓº∆ ±∆˜\Projects\zstack\MyCoordin #
#                          ator\Coordinator\CC2530DB\CoordinatorEB\List\"     #
#                          --diag_suppress Pe001,Pa010 -o                     #
#                          "C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\coor        #
#                          ±∏∑›\Coor for ARM2.0 –ﬁ∏ƒµÿ÷∑±Ìº”»Î±£ªÓº∆ ±∆˜\Proj #
#                          ects\zstack\MyCoordinator\Coordinator\CC2530DB\Coo #
#                          rdinatorEB\Obj\" -e --no_code_motion --debug       #
#                          --core=plain --dptr=16,1 --data_model=large        #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 16 -I "C:\Users\William\Desktop\ #
#                          ±œ“µ…Ëº∆\SRC\coor ±∏∑›\Coor for ARM2.0             #
#                          –ﬁ∏ƒµÿ÷∑±Ìº”»Î±£ªÓº∆ ±∆˜\Projects\zstack\MyCoordin #
#                          ator\Coordinator\CC2530DB\" -I                     #
#                          "C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\coor        #
#                          ±∏∑›\Coor for ARM2.0 –ﬁ∏ƒµÿ÷∑±Ìº”»Î±£ªÓº∆ ±∆˜\Proj #
#                          ects\zstack\MyCoordinator\Coordinator\CC2530DB\..\ #
#                          Source\" -I "C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC #
#                          \coor ±∏∑›\Coor for ARM2.0                         #
#                          –ﬁ∏ƒµÿ÷∑±Ìº”»Î±£ªÓº∆ ±∆˜\Projects\zstack\MyCoordin #
#                          ator\Coordinator\CC2530DB\..\..\..\ZMain\TI2530DB\ #
#                          " -I "C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\coor   #
#                          ±∏∑›\Coor for ARM2.0 –ﬁ∏ƒµÿ÷∑±Ìº”»Î±£ªÓº∆ ±∆˜\Proj #
#                          ects\zstack\MyCoordinator\Coordinator\CC2530DB\..\ #
#                          ..\..\..\..\Components\hal\include\" -I            #
#                          "C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\coor        #
#                          ±∏∑›\Coor for ARM2.0 –ﬁ∏ƒµÿ÷∑±Ìº”»Î±£ªÓº∆ ±∆˜\Proj #
#                          ects\zstack\MyCoordinator\Coordinator\CC2530DB\..\ #
#                          ..\..\..\..\Components\hal\target\CC2530EB\" -I    #
#                          "C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\coor        #
#                          ±∏∑›\Coor for ARM2.0 –ﬁ∏ƒµÿ÷∑±Ìº”»Î±£ªÓº∆ ±∆˜\Proj #
#                          ects\zstack\MyCoordinator\Coordinator\CC2530DB\..\ #
#                          ..\..\..\..\Components\mac\include\" -I            #
#                          "C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\coor        #
#                          ±∏∑›\Coor for ARM2.0 –ﬁ∏ƒµÿ÷∑±Ìº”»Î±£ªÓº∆ ±∆˜\Proj #
#                          ects\zstack\MyCoordinator\Coordinator\CC2530DB\..\ #
#                          ..\..\..\..\Components\mac\high_level\" -I         #
#                          "C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\coor        #
#                          ±∏∑›\Coor for ARM2.0 –ﬁ∏ƒµÿ÷∑±Ìº”»Î±£ªÓº∆ ±∆˜\Proj #
#                          ects\zstack\MyCoordinator\Coordinator\CC2530DB\..\ #
#                          ..\..\..\..\Components\mac\low_level\srf04\" -I    #
#                          "C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\coor        #
#                          ±∏∑›\Coor for ARM2.0 –ﬁ∏ƒµÿ÷∑±Ìº”»Î±£ªÓº∆ ±∆˜\Proj #
#                          ects\zstack\MyCoordinator\Coordinator\CC2530DB\..\ #
#                          ..\..\..\..\Components\mac\low_level\srf04\single_ #
#                          chip\" -I "C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\c #
#                          oor ±∏∑›\Coor for ARM2.0                           #
#                          –ﬁ∏ƒµÿ÷∑±Ìº”»Î±£ªÓº∆ ±∆˜\Projects\zstack\MyCoordin #
#                          ator\Coordinator\CC2530DB\..\..\..\..\..\Component #
#                          s\mt\" -I "C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\c #
#                          oor ±∏∑›\Coor for ARM2.0                           #
#                          –ﬁ∏ƒµÿ÷∑±Ìº”»Î±£ªÓº∆ ±∆˜\Projects\zstack\MyCoordin #
#                          ator\Coordinator\CC2530DB\..\..\..\..\..\Component #
#                          s\osal\include\" -I "C:\Users\William\Desktop\±œ“µ #
#                          …Ëº∆\SRC\coor ±∏∑›\Coor for ARM2.0                 #
#                          –ﬁ∏ƒµÿ÷∑±Ìº”»Î±£ªÓº∆ ±∆˜\Projects\zstack\MyCoordin #
#                          ator\Coordinator\CC2530DB\..\..\..\..\..\Component #
#                          s\services\saddr\" -I "C:\Users\William\Desktop\±œ #
#                          “µ…Ëº∆\SRC\coor ±∏∑›\Coor for ARM2.0               #
#                          –ﬁ∏ƒµÿ÷∑±Ìº”»Î±£ªÓº∆ ±∆˜\Projects\zstack\MyCoordin #
#                          ator\Coordinator\CC2530DB\..\..\..\..\..\Component #
#                          s\services\sdata\" -I "C:\Users\William\Desktop\±œ #
#                          “µ…Ëº∆\SRC\coor ±∏∑›\Coor for ARM2.0               #
#                          –ﬁ∏ƒµÿ÷∑±Ìº”»Î±£ªÓº∆ ±∆˜\Projects\zstack\MyCoordin #
#                          ator\Coordinator\CC2530DB\..\..\..\..\..\Component #
#                          s\stack\af\" -I "C:\Users\William\Desktop\±œ“µ…Ëº∆ #
#                          \SRC\coor ±∏∑›\Coor for ARM2.0                     #
#                          –ﬁ∏ƒµÿ÷∑±Ìº”»Î±£ªÓº∆ ±∆˜\Projects\zstack\MyCoordin #
#                          ator\Coordinator\CC2530DB\..\..\..\..\..\Component #
#                          s\stack\nwk\" -I "C:\Users\William\Desktop\±œ“µ…Ëº #
#                          ∆\SRC\coor ±∏∑›\Coor for ARM2.0                    #
#                          –ﬁ∏ƒµÿ÷∑±Ìº”»Î±£ªÓº∆ ±∆˜\Projects\zstack\MyCoordin #
#                          ator\Coordinator\CC2530DB\..\..\..\..\..\Component #
#                          s\stack\sapi\" -I "C:\Users\William\Desktop\±œ“µ…Ë #
#                          º∆\SRC\coor ±∏∑›\Coor for ARM2.0                   #
#                          –ﬁ∏ƒµÿ÷∑±Ìº”»Î±£ªÓº∆ ±∆˜\Projects\zstack\MyCoordin #
#                          ator\Coordinator\CC2530DB\..\..\..\..\..\Component #
#                          s\stack\sec\" -I "C:\Users\William\Desktop\±œ“µ…Ëº #
#                          ∆\SRC\coor ±∏∑›\Coor for ARM2.0                    #
#                          –ﬁ∏ƒµÿ÷∑±Ìº”»Î±£ªÓº∆ ±∆˜\Projects\zstack\MyCoordin #
#                          ator\Coordinator\CC2530DB\..\..\..\..\..\Component #
#                          s\stack\sys\" -I "C:\Users\William\Desktop\±œ“µ…Ëº #
#                          ∆\SRC\coor ±∏∑›\Coor for ARM2.0                    #
#                          –ﬁ∏ƒµÿ÷∑±Ìº”»Î±£ªÓº∆ ±∆˜\Projects\zstack\MyCoordin #
#                          ator\Coordinator\CC2530DB\..\..\..\..\..\Component #
#                          s\stack\zdo\" -I "C:\Users\William\Desktop\±œ“µ…Ëº #
#                          ∆\SRC\coor ±∏∑›\Coor for ARM2.0                    #
#                          –ﬁ∏ƒµÿ÷∑±Ìº”»Î±£ªÓº∆ ±∆˜\Projects\zstack\MyCoordin #
#                          ator\Coordinator\CC2530DB\..\..\..\..\..\Component #
#                          s\zmac\" -I "C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC #
#                          \coor ±∏∑›\Coor for ARM2.0                         #
#                          –ﬁ∏ƒµÿ÷∑±Ìº”»Î±£ªÓº∆ ±∆˜\Projects\zstack\MyCoordin #
#                          ator\Coordinator\CC2530DB\..\..\..\..\..\Component #
#                          s\zmac\f8w\" -Ohz --require_prototypes             #
#    List file          =  C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\coor         #
#                          ±∏∑›\Coor for ARM2.0 –ﬁ∏ƒµÿ÷∑±Ìº”»Î±£ªÓº∆ ±∆˜\Proj #
#                          ects\zstack\MyCoordinator\Coordinator\CC2530DB\Coo #
#                          rdinatorEB\List\OnBoard.lst                        #
#    Object file        =  C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\coor         #
#                          ±∏∑›\Coor for ARM2.0 –ﬁ∏ƒµÿ÷∑±Ìº”»Î±£ªÓº∆ ±∆˜\Proj #
#                          ects\zstack\MyCoordinator\Coordinator\CC2530DB\Coo #
#                          rdinatorEB\Obj\OnBoard.r51                         #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\coor ±∏∑›\Coor for ARM2.0 –ﬁ∏ƒµÿ÷∑±Ìº”»Î±£ªÓº∆ ±∆˜\Projects\zstack\ZMain\TI2530DB\OnBoard.c
      1          /**************************************************************************************************
      2            Filename:       OnBoard.c
      3            Revised:        $Date: 2012-03-29 12:09:02 -0700 (Thu, 29 Mar 2012) $
      4            Revision:       $Revision: 29943 $
      5          
      6            Description:    This file contains the UI and control for the
      7                            peripherals on the EVAL development board
      8            Notes:          This file targets the Chipcon CC2530/31
      9          
     10          
     11            Copyright 2005-2010 Texas Instruments Incorporated. All rights reserved.
     12          
     13            IMPORTANT: Your use of this Software is limited to those specific rights
     14            granted under the terms of a software license agreement between the user
     15            who downloaded the software, his/her employer (which must be your employer)
     16            and Texas Instruments Incorporated (the "License").  You may not use this
     17            Software unless you agree to abide by the terms of the License. The License
     18            limits your use, and you acknowledge, that the Software may not be modified,
     19            copied or distributed unless embedded on a Texas Instruments microcontroller
     20            or used solely and exclusively in conjunction with a Texas Instruments radio
     21            frequency transceiver, which is integrated into your product.  Other than for
     22            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     23            works of, modify, distribute, perform, display or sell this Software and/or
     24            its documentation for any purpose.
     25          
     26            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     27            PROVIDED ìAS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     28            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     29            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     30            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     31            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     32            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     33            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     34            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     35            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     36            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     37          
     38            Should you have any questions regarding your right to use this Software,
     39            contact Texas Instruments Incorporated at www.TI.com.
     40          **************************************************************************************************/
     41          
     42          /*********************************************************************
     43           * INCLUDES
     44           */
     45          
     46          #include "ZComDef.h"
     47          #include "ZGlobals.h"
     48          #include "OnBoard.h"

   \                                 In  segment SFR_AN, at 0x9d
   \   unsigned char volatile __sfr SLEEPSTA
   \                     SLEEPSTA:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IEN0
   \                     _A_IEN0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xd6
   \   unsigned char volatile __sfr DMAARM
   \                     DMAARM:
   \   000000                DS 1
     49          #include "OSAL.h"
     50          #include "MT.h"
     51          #include "MT_SYS.h"
     52          #include "DebugTrace.h"
     53          
     54          /* Hal */
     55          
     56          #include "hal_mcu.h"
     57          #include "hal_timer.h"
     58          
     59          
     60          /* Allow access macRandomByte() */
     61          #include "mac_radio_defs.h"
     62          
     63          /*********************************************************************
     64           * CONSTANTS
     65           */
     66          
     67          // Task ID not initialized
     68          #define NO_TASK_ID 0xFF
     69          
     70          // Minimum length RAM "pattern" for Stack check
     71          #define MIN_RAM_INIT 12
     72          
     73          /*********************************************************************
     74           * GLOBAL VARIABLES
     75           */
     76          
     77          #if defined MAKE_CRC_SHDW
     78          #pragma location="CRC_SHDW"
     79          const CODE uint16 _crcShdw = 0xFFFF;
     80          #pragma required=_crcShdw
     81          
     82          #else  // if !defined MAKE_CRC_SHDW
     83          
     84          #pragma location="LOCK_BITS_ADDRESS_SPACE"

   \                                 In  segment LOCK_BITS_ADDRESS_SPACE, align 1
     85          __no_init uint8 _lockBits[16];
   \                     _lockBits:
   \   000000                DS 16
     86          #pragma required=_lockBits
     87          
     88          #if defined ZCL_KEY_ESTABLISH
     89          #include "zcl_cert_data.c"
     90          #else
     91          #pragma location="IEEE_ADDRESS_SPACE"

   \                                 In  segment IEEE_ADDRESS_SPACE, align 1
     92          __no_init uint8 _nvIEEE[Z_EXTADDR_LEN];
   \                     _nvIEEE:
   \   000000                DS 8
   \   000008                REQUIRE _lockBits
     93          #pragma required=_nvIEEE
     94          #endif
     95          
     96          #pragma location="RESERVED_ADDRESS_SPACE"

   \                                 In  segment RESERVED_ADDRESS_SPACE, align 1
     97          __no_init uint8 _reserved[1932];
   \                     _reserved:
   \   000000                DS 1932
   \   00078C                REQUIRE _nvIEEE
     98          #pragma required=_reserved
     99          #endif
    100          
    101          // 64-bit Extended Address of this device

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    102          uint8 aExtendedAddress[8];
   \                     aExtendedAddress:
   \   000000                DS 8
   \   000008                REQUIRE __INIT_XDATA_Z
   \   000008                REQUIRE _reserved
    103          
    104          /*********************************************************************
    105           * LOCAL VARIABLES
    106           */
    107          
    108          // Registered keys task ID, initialized to NOT USED.

   \                                 In  segment XDATA_I, align 1, keep-with-next
    109          static uint8 registeredKeysTaskID = NO_TASK_ID;
   \                     registeredKeysTaskID:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for registeredKeysTaskID>`
   \   000001                REQUIRE __INIT_XDATA_I
    110          
    111          /*********************************************************************
    112           * LOCAL FUNCTIONS
    113           */
    114          
    115          static void ChkReset( void );
    116          
    117          /*********************************************************************
    118           * @fn      InitBoard()
    119           * @brief   Initialize the CC2420DB Board Peripherals
    120           * @param   level: COLD,WARM,READY
    121           * @return  None
    122           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    123          void InitBoard( uint8 level )
   \                     InitBoard:
    124          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
    125            if ( level == OB_COLD )
   \   000006   701E         JNZ     ??InitBoard_0
    126            {
    127              // IAR does not zero-out this byte below the XSTACK.
    128              *(uint8 *)0x0 = 0;
   \   000008   900000       MOV     DPTR,#0x0
   \   00000B   E4           CLR     A
   \   00000C   F0           MOVX    @DPTR,A
    129              // Interrupts off
    130              osal_int_disable( INTS_ALL );
   \   00000D                ; Setup parameters for call to function osal_int_disable
   \   00000D   79FF         MOV     R1,#-0x1
   \   00000F   12....       LCALL   ??osal_int_disable?relay
    131              // Check for Brown-Out reset
    132              ChkReset();
   \   000012   E59D         MOV     A,0x9d
   \   000014   5418         ANL     A,#0x18
   \   000016   F8           MOV     R0,A
   \   000017   600D         JZ      ??InitBoard_0
   \   000019   7408         MOV     A,#0x8
   \   00001B   68           XRL     A,R0
   \   00001C   6008         JZ      ??InitBoard_0
   \   00001E   7410         MOV     A,#0x10
   \   000020   68           XRL     A,R0
   \   000021   6003         JZ      ??InitBoard_0
   \   000023                ; Setup parameters for call to function halAssertHandler
   \   000023   12....       LCALL   ??halAssertHandler?relay
    133            }
    134            else  // !OB_COLD
    135            {
    136             
    137            }
    138          }
   \                     ??InitBoard_0:
   \   000026   7F01         MOV     R7,#0x1
   \   000028   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   00002B                REQUIRE SLEEPSTA
    139          
    140          /*********************************************************************
    141           * @fn      ChkReset()
    142           * @brief   Check reset bits - if reset cause is unknown, assume a
    143           *          brown-out (low power), assume batteries are not reliable,
    144           *          hang in a loop and sequence through the LEDs.
    145           * @param   None
    146           * @return  None
    147           *********************************************************************/
    148          void ChkReset( void )
    149          {
    150            uint8 rib;
    151          
    152            // Isolate reset indicator bits
    153            rib = SLEEPSTA & LRESET;
    154          
    155            if ( rib == RESETPO )
    156            {
    157              // Put code here to handle Power-On reset
    158            }
    159            else if ( rib == RESETEX )
    160            {
    161              // Put code here to handle External reset
    162            }
    163            else if ( rib == RESETWD )
    164            {
    165              // Put code here to handle WatchDog reset
    166            }
    167            else  // Unknown reason - not expected.
    168            {
    169              HAL_ASSERT(0);
    170            }
    171          }
    172          
    173          /*********************************************************************
    174           *                        "Keyboard" Support
    175           *********************************************************************/
    176          
    177          /*********************************************************************
    178           * Keyboard Register function
    179           *
    180           * The keyboard handler is setup to send all keyboard changes to
    181           * one task (if a task is registered).
    182           *
    183           * If a task registers, it will get all the keys. You can change this
    184           * to register for individual keys.
    185           *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    186          uint8 RegisterForKeys( uint8 task_id )
   \                     RegisterForKeys:
    187          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   E9           MOV     A,R1
   \   000005   F8           MOV     R0,A
    188            // Allow only the first task
    189            if ( registeredKeysTaskID == NO_TASK_ID )
   \   000006   90....       MOV     DPTR,#registeredKeysTaskID
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   F4           CPL     A
   \   00000B   7006         JNZ     ??RegisterForKeys_0
    190            {
    191              registeredKeysTaskID = task_id;
   \   00000D   E8           MOV     A,R0
   \   00000E   F0           MOVX    @DPTR,A
    192              return ( true );
   \   00000F   7901         MOV     R1,#0x1
   \   000011   8002         SJMP    ??RegisterForKeys_1
    193            }
    194            else
    195              return ( false );
   \                     ??RegisterForKeys_0:
   \   000013   7900         MOV     R1,#0x0
   \                     ??RegisterForKeys_1:
   \   000015                REQUIRE ?Subroutine0
   \   000015                ; // Fall through to label ?Subroutine0
    196          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    197          
    198          /*********************************************************************
    199           * @fn      OnBoard_SendKeys
    200           *
    201           * @brief   Send "Key Pressed" message to application.
    202           *
    203           * @param   keys  - keys that were pressed
    204           *          state - shifted
    205           *
    206           * @return  status
    207           *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    208          uint8 OnBoard_SendKeys( uint8 keys, uint8 state )
   \                     OnBoard_SendKeys:
    209          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   \   000007   EA           MOV     A,R2
   \   000008   FF           MOV     R7,A
    210            keyChange_t *msgPtr;
    211          
    212            if ( registeredKeysTaskID != NO_TASK_ID )
   \   000009   90....       MOV     DPTR,#registeredKeysTaskID
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   F4           CPL     A
   \   00000E   602B         JZ      ??OnBoard_SendKeys_0
    213            {
    214              // Send the address to the task
    215              msgPtr = (keyChange_t *)osal_msg_allocate( sizeof(keyChange_t) );
   \   000010                ; Setup parameters for call to function osal_msg_allocate
   \   000010   7A04         MOV     R2,#0x4
   \   000012   7B00         MOV     R3,#0x0
   \   000014   12....       LCALL   ??osal_msg_allocate?relay
    216              if ( msgPtr )
   \   000017   EA           MOV     A,R2
   \   000018   4B           ORL     A,R3
   \   000019   601C         JZ      ??OnBoard_SendKeys_1
    217              {
    218                msgPtr->hdr.event = KEY_CHANGE;
   \   00001B   8A82         MOV     DPL,R2
   \   00001D   8B83         MOV     DPH,R3
   \   00001F   74C0         MOV     A,#-0x40
   \   000021   F0           MOVX    @DPTR,A
    219                msgPtr->state = state;
   \   000022   EF           MOV     A,R7
   \   000023   A3           INC     DPTR
   \   000024   A3           INC     DPTR
   \   000025   F0           MOVX    @DPTR,A
    220                msgPtr->keys = keys;
   \   000026   EE           MOV     A,R6
   \   000027   8A82         MOV     DPL,R2
   \   000029   8B83         MOV     DPH,R3
   \   00002B   A3           INC     DPTR
   \   00002C   A3           INC     DPTR
   \   00002D   A3           INC     DPTR
   \   00002E   F0           MOVX    @DPTR,A
    221          
    222                osal_msg_send( registeredKeysTaskID, (uint8 *)msgPtr );
   \   00002F                ; Setup parameters for call to function osal_msg_send
   \   00002F   90....       MOV     DPTR,#registeredKeysTaskID
   \   000032   E0           MOVX    A,@DPTR
   \   000033   F9           MOV     R1,A
   \   000034   12....       LCALL   ??osal_msg_send?relay
    223              }
    224              return ( ZSuccess );
   \                     ??OnBoard_SendKeys_1:
   \   000037   7900         MOV     R1,#0x0
   \   000039   8002         SJMP    ??OnBoard_SendKeys_2
    225            }
    226            else
    227              return ( ZFailure );
   \                     ??OnBoard_SendKeys_0:
   \   00003B   7901         MOV     R1,#0x1
   \                     ??OnBoard_SendKeys_2:
   \   00003D   7F02         MOV     R7,#0x2
   \   00003F   02....       LJMP    ?BANKED_LEAVE_XDATA
    228          }
    229          
    230          /*********************************************************************
    231           * @fn      OnBoard_KeyCallback
    232           *
    233           * @brief   Callback service for keys
    234           *
    235           * @param   keys  - keys that were pressed
    236           *          state - shifted
    237           *
    238           * @return  void
    239           *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    240          void OnBoard_KeyCallback ( uint8 keys, uint8 state )
   \                     OnBoard_KeyCallback:
    241          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    242           ;
    243          }
   \   000000   02....       LJMP    ?BRET
    244          
    245          /*********************************************************************
    246           * @fn      OnBoard_stack_used
    247           *
    248           * @brief   Runs through the stack looking for touched memory.
    249           *
    250           * @param   none
    251           *
    252           * @return  Maximum number of bytes used by the stack.
    253           *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    254          uint16 OnBoard_stack_used(void)
   \                     OnBoard_stack_used:
    255          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    256            uint8 const *ptr;
    257            uint8 cnt = 0;
   \   000004   7800         MOV     R0,#0x0
    258          
    259            for (ptr = CSTACK_END; ptr > CSTACK_BEG; ptr--)
   \   000006   7582..       MOV     DPL,#(SFE(XSTACK) + 255) & 0xff
   \   000009   7583..       MOV     DPH,#((SFE(XSTACK) - 1) >> 8) & 0xff
   \   00000C   800E         SJMP    ??OnBoard_stack_used_0
    260            {
    261              if (STACK_INIT_VALUE == *ptr)
    262              {
    263                if (++cnt >= MIN_RAM_INIT)
    264                {
    265                  ptr += MIN_RAM_INIT;
    266                  break;
    267                }
    268              }
    269              else
    270              {
    271                cnt = 0;
   \                     ??OnBoard_stack_used_1:
   \   00000E   7800         MOV     R0,#0x0
    272              }
   \                     ??OnBoard_stack_used_2:
   \   000010   E582         MOV     A,DPL
   \   000012   24FF         ADD     A,#-0x1
   \   000014   F582         MOV     DPL,A
   \   000016   E583         MOV     A,DPH
   \   000018   34FF         ADDC    A,#-0x1
   \   00001A   F583         MOV     DPH,A
   \                     ??OnBoard_stack_used_0:
   \   00001C   C3           CLR     C
   \   00001D   74..         MOV     A,#SFB(XSTACK) & 0xff
   \   00001F   9582         SUBB    A,DPL
   \   000021   74..         MOV     A,#(SFB(XSTACK) >> 8) & 0xff
   \   000023   9583         SUBB    A,DPH
   \   000025   5018         JNC     ??OnBoard_stack_used_3
   \   000027   E0           MOVX    A,@DPTR
   \   000028   64CD         XRL     A,#0xcd
   \   00002A   70E2         JNZ     ??OnBoard_stack_used_1
   \   00002C   08           INC     R0
   \   00002D   E8           MOV     A,R0
   \   00002E   C3           CLR     C
   \   00002F   940C         SUBB    A,#0xc
   \   000031   40DD         JC      ??OnBoard_stack_used_2
   \   000033   E582         MOV     A,DPL
   \   000035   240C         ADD     A,#0xc
   \   000037   F582         MOV     DPL,A
   \   000039   E583         MOV     A,DPH
   \   00003B   3400         ADDC    A,#0x0
   \   00003D   F583         MOV     DPH,A
    273            }
    274          
    275            return (uint16)(CSTACK_END - ptr + 1);
   \                     ??OnBoard_stack_used_3:
   \   00003F   74..         MOV     A,#(SFE(XSTACK) + 255) & 0xff
   \   000041   C3           CLR     C
   \   000042   9582         SUBB    A,DPL
   \   000044   F8           MOV     R0,A
   \   000045   74..         MOV     A,#((SFE(XSTACK) - 1) >> 8) & 0xff
   \   000047   9583         SUBB    A,DPH
   \   000049   F9           MOV     R1,A
   \   00004A   E8           MOV     A,R0
   \   00004B   2401         ADD     A,#0x1
   \   00004D   FA           MOV     R2,A
   \   00004E   E9           MOV     A,R1
   \   00004F   3400         ADDC    A,#0x0
   \   000051   FB           MOV     R3,A
   \   000052   02....       LJMP    ?Subroutine0 & 0xFFFF
    276          }
    277          
    278          /*********************************************************************
    279           * @fn      _itoa
    280           *
    281           * @brief   convert a 16bit number to ASCII
    282           *
    283           * @param   num -
    284           *          buf -
    285           *          radix -
    286           *
    287           * @return  void
    288           *
    289           *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    290          void _itoa(uint16 num, uint8 *buf, uint8 radix)
   \                     _itoa:
    291          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV     A,#-0x5
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   \   00000E   8C..         MOV     ?V0 + 0,R4
   \   000010   8D..         MOV     ?V0 + 1,R5
   \   000012   89..         MOV     ?V0 + 4,R1
    292            char c,i;
    293            uint8 *p, rst[5];
    294          
    295            p = rst;
   \   000014   85..82       MOV     DPL,?XSP + 0
   \   000017   85..83       MOV     DPH,?XSP + 1
   \   00001A   AC82         MOV     R4,DPL
   \   00001C   AD83         MOV     R5,DPH
    296            for ( i=0; i<5; i++,p++ )
   \   00001E   75..00       MOV     ?V0 + 5,#0x0
    297            {
    298              c = num % radix;  // Isolate a digit
   \                     ??_itoa_0:
   \   000021   EE           MOV     A,R6
   \   000022   F8           MOV     R0,A
   \   000023   EF           MOV     A,R7
   \   000024   F9           MOV     R1,A
   \   000025   85....       MOV     ?V0 + 2,?V0 + 4
   \   000028   AA..         MOV     R2,?V0 + 2
   \   00002A   7B00         MOV     R3,#0x0
   \   00002C   12....       LCALL   ?US_DIV_MOD
   \   00002F   EA           MOV     A,R2
    299              *p = c + (( c < 10 ) ? '0' : '7');  // Convert to Ascii
   \   000030   940A         SUBB    A,#0xa
   \   000032   5004         JNC     ??_itoa_1
   \   000034   7830         MOV     R0,#0x30
   \   000036   8002         SJMP    ??_itoa_2
   \                     ??_itoa_1:
   \   000038   7837         MOV     R0,#0x37
   \                     ??_itoa_2:
   \   00003A   E8           MOV     A,R0
   \   00003B   2A           ADD     A,R2
   \   00003C   8C82         MOV     DPL,R4
   \   00003E   8D83         MOV     DPH,R5
   \   000040   F0           MOVX    @DPTR,A
    300              num /= radix;
   \   000041   EE           MOV     A,R6
   \   000042   F8           MOV     R0,A
   \   000043   EF           MOV     A,R7
   \   000044   F9           MOV     R1,A
   \   000045   AA..         MOV     R2,?V0 + 2
   \   000047   7B00         MOV     R3,#0x0
   \   000049   12....       LCALL   ?US_DIV_MOD
   \   00004C   88..         MOV     ?V0 + 2,R0
   \   00004E   89..         MOV     ?V0 + 3,R1
   \   000050   AE..         MOV     R6,?V0 + 2
   \   000052   AF..         MOV     R7,?V0 + 3
    301              if ( !num )
   \   000054   EE           MOV     A,R6
   \   000055   4F           ORL     A,R7
   \   000056   600D         JZ      ??_itoa_3
    302                break;
    303            }
   \   000058   05..         INC     ?V0 + 5
   \   00005A   A3           INC     DPTR
   \   00005B   AC82         MOV     R4,DPL
   \   00005D   AD83         MOV     R5,DPH
   \   00005F   E5..         MOV     A,?V0 + 5
   \   000061   9405         SUBB    A,#0x5
   \   000063   40BC         JC      ??_itoa_0
    304          
    305            for ( c=0 ; c<=i; c++ )
   \                     ??_itoa_3:
   \   000065   7A00         MOV     R2,#0x0
    306              *buf++ = *p--;  // Reverse character order
   \                     ??_itoa_4:
   \   000067   8C82         MOV     DPL,R4
   \   000069   8D83         MOV     DPH,R5
   \   00006B   E0           MOVX    A,@DPTR
   \   00006C   85..82       MOV     DPL,?V0 + 0
   \   00006F   85..83       MOV     DPH,?V0 + 1
   \   000072   F0           MOVX    @DPTR,A
   \   000073   EC           MOV     A,R4
   \   000074   24FF         ADD     A,#-0x1
   \   000076   1C           DEC     R4
   \   000077   ED           MOV     A,R5
   \   000078   34FF         ADDC    A,#-0x1
   \   00007A   FD           MOV     R5,A
   \   00007B   A3           INC     DPTR
   \   00007C   8582..       MOV     ?V0 + 0,DPL
   \   00007F   8583..       MOV     ?V0 + 1,DPH
   \   000082   0A           INC     R2
   \   000083   E5..         MOV     A,?V0 + 5
   \   000085   C3           CLR     C
   \   000086   9A           SUBB    A,R2
   \   000087   50DE         JNC     ??_itoa_4
    307          
    308            *buf = '\0';
   \   000089   E4           CLR     A
   \   00008A   F0           MOVX    @DPTR,A
    309          }
   \   00008B   7405         MOV     A,#0x5
   \   00008D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000090   7F06         MOV     R7,#0x6
   \   000092   02....       LJMP    ?BANKED_LEAVE_XDATA
    310          
    311          /*********************************************************************
    312           * @fn        Onboard_rand
    313           *
    314           * @brief    Random number generator
    315           *
    316           * @param   none
    317           *
    318           * @return  uint16 - new random number
    319           *
    320           *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    321          uint16 Onboard_rand( void )
   \                     Onboard_rand:
    322          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    323            return ( MAC_RADIO_RANDOM_WORD() );
   \   000004                ; Setup parameters for call to function macMcuRandomWord
   \   000004   12....       LCALL   ??macMcuRandomWord?relay
   \   000007   02....       LJMP    ?Subroutine0 & 0xFFFF
    324          }
    325          
    326          /*********************************************************************
    327           * @fn        Onboard_wait
    328           *
    329           * @brief    Delay wait
    330           *
    331           * @param   uint16 - time to wait
    332           *
    333           * @return  none
    334           *
    335           *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    336          void Onboard_wait( uint16 timeout )
   \                     Onboard_wait:
    337          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000   8003         SJMP    ??Onboard_wait_0
    338            while (timeout--)
    339            {
    340              asm("NOP");
   \                     ??Onboard_wait_1:
   \   000002   00           NOP
    341              asm("NOP");
   \   000003   00           NOP
    342              asm("NOP");
   \   000004   00           NOP
    343            }
   \                     ??Onboard_wait_0:
   \   000005   EA           MOV     A,R2
   \   000006   F8           MOV     R0,A
   \   000007   EB           MOV     A,R3
   \   000008   F9           MOV     R1,A
   \   000009   E8           MOV     A,R0
   \   00000A   24FF         ADD     A,#-0x1
   \   00000C   1A           DEC     R2
   \   00000D   E9           MOV     A,R1
   \   00000E   34FF         ADDC    A,#-0x1
   \   000010   FB           MOV     R3,A
   \   000011   E8           MOV     A,R0
   \   000012   49           ORL     A,R1
   \   000013   70ED         JNZ     ??Onboard_wait_1
    344          }
   \   000015   02....       LJMP    ?BRET
    345          
    346          /*********************************************************************
    347           * @fn      Onboard_soft_reset
    348           *
    349           * @brief   Effect a soft reset.
    350           *
    351           * @param   none
    352           *
    353           * @return  none
    354           *
    355           *********************************************************************/

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    356          __near_func void Onboard_soft_reset( void )
   \                     Onboard_soft_reset:
    357          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    358            HAL_DISABLE_INTERRUPTS();
   \   000000   C2AF         CLR     0xa8.7
    359            // Abort all DMA channels to insure that ongoing operations do not
    360            // interfere with re-configuration.
    361            DMAARM = 0x80 | 0x1F;
   \   000002   75D69F       MOV     0xd6,#-0x61
    362            asm("LJMP 0x0");
   \   000005   020000       LJMP 0x0
    363          }
   \   000008   22           RET
   \   000009                REQUIRE _A_IEN0
   \   000009                REQUIRE DMAARM
    364          
    365          /*********************************************************************
    366           *                    EXTERNAL I/O FUNCTIONS
    367           *
    368           * User defined functions to control external devices. Add your code
    369           * to the following functions to control devices wired to DB outputs.
    370           *
    371           *********************************************************************/
    372          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    373          void BigLight_On( void )
   \                     BigLight_On:
    374          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    375            // Put code here to turn on an external light
    376          }
   \   000000   02....       LJMP    ?BRET
    377          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    378          void BigLight_Off( void )
   \                     BigLight_Off:
    379          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    380            // Put code here to turn off an external light
    381          }
   \   000000   02....       LJMP    ?BRET
    382          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    383          void BuzzerControl( uint8 on )
   \                     BuzzerControl:
    384          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    385            // Put code here to turn a buzzer on/off
    386            (void)on;
    387          }
   \   000000   02....       LJMP    ?BRET
    388          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    389          void Dimmer( uint8 lvl )
   \                     Dimmer:
    390          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    391            // Put code here to control a dimmer
    392            (void)lvl;
    393          }
   \   000000   02....       LJMP    ?BRET
    394          
    395          // No dip switches on this board

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    396          uint8 GetUserDipSw( void )
   \                     GetUserDipSw:
    397          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    398            return 0;
   \   000000   7900         MOV     R1,#0x0
   \   000002   02....       LJMP    ?BRET
    399          }

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for registeredKeysTaskID>`:
   \   000000   FF           DB 255

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??InitBoard?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    InitBoard

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??RegisterForKeys?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    RegisterForKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??OnBoard_SendKeys?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    OnBoard_SendKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??OnBoard_KeyCallback?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    OnBoard_KeyCallback

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??OnBoard_stack_used?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    OnBoard_stack_used

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??_itoa?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    _itoa

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??Onboard_rand?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Onboard_rand

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??Onboard_wait?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Onboard_wait

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??BigLight_On?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    BigLight_On

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??BigLight_Off?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    BigLight_Off

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??BuzzerControl?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    BuzzerControl

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??Dimmer?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Dimmer

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??GetUserDipSw?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    GetUserDipSw
    400          
    401          /*********************************************************************
    402          *********************************************************************/

   Maximum stack usage in bytes:

     Function               ISTACK PSTACK XSTACK
     --------               ------ ------ ------
     BigLight_Off               0      0      0
     BigLight_On                0      0      0
     BuzzerControl              0      0      0
     Dimmer                     0      0      0
     GetUserDipSw               0      0      0
     InitBoard                  0      0      9
       -> osal_int_disable      0      0     18
       -> halAssertHandler      0      0     18
     OnBoard_KeyCallback        0      0      0
     OnBoard_SendKeys           1      0     10
       -> osal_msg_allocate     0      0     20
       -> osal_msg_send         0      0     20
     OnBoard_stack_used         2      0      0
     Onboard_rand               2      0      0
       -> macMcuRandomWord      4      0      0
     Onboard_soft_reset         0      0      0
     Onboard_wait               0      0      0
     RegisterForKeys            2      0      0
     _itoa                      1      0     19


   Segment part sizes:

     Function/Label                          Bytes
     --------------                          -----
     SLEEPSTA                                   1
     _A_IEN0                                    1
     DMAARM                                     1
     _lockBits                                 16
     _nvIEEE                                    8
     _reserved                               1932
     aExtendedAddress                           8
     registeredKeysTaskID                       1
     InitBoard                                 43
     RegisterForKeys                           21
     ?Subroutine0                               7
     OnBoard_SendKeys                          66
     OnBoard_KeyCallback                        3
     OnBoard_stack_used                        85
     _itoa                                    149
     Onboard_rand                              10
     Onboard_wait                              24
     Onboard_soft_reset                         9
     BigLight_On                                3
     BigLight_Off                               3
     BuzzerControl                              3
     Dimmer                                     3
     GetUserDipSw                               5
     ?<Initializer for registeredKeysTaskID>    1
     ??InitBoard?relay                          6
     ??RegisterForKeys?relay                    6
     ??OnBoard_SendKeys?relay                   6
     ??OnBoard_KeyCallback?relay                6
     ??OnBoard_stack_used?relay                 6
     ??_itoa?relay                              6
     ??Onboard_rand?relay                       6
     ??Onboard_wait?relay                       6
     ??BigLight_On?relay                        6
     ??BigLight_Off?relay                       6
     ??BuzzerControl?relay                      6
     ??Dimmer?relay                             6
     ??GetUserDipSw?relay                       6

 
   425 bytes in segment BANKED_CODE
    78 bytes in segment BANK_RELAYS
     8 bytes in segment IEEE_ADDRESS_SPACE
    16 bytes in segment LOCK_BITS_ADDRESS_SPACE
     9 bytes in segment NEAR_CODE
 1 932 bytes in segment RESERVED_ADDRESS_SPACE
     3 bytes in segment SFR_AN
     1 byte  in segment XDATA_I
     1 byte  in segment XDATA_ID
     8 bytes in segment XDATA_Z
 
   513 bytes of CODE  memory
     0 bytes of DATA  memory (+ 3 bytes shared)
 1 965 bytes of XDATA memory

Errors: none
Warnings: none
