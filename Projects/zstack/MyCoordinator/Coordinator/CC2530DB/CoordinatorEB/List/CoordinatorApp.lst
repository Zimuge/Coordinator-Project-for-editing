###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.1.10194/W32 for 8051         12/May/2015  19:18:27 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\coor         #
#                          ±∏∑›\ARM\Coor for ARM 3.1(ÃÌº”÷∏¡Ó…œ¥´À˘”–≥ı ºªØ ˝ #
#                          æ›£©\Projects\zstack\MyCoordinator\Coordinator\Sou #
#                          rce\CoordinatorApp.c                               #
#    Command line       =  -f "C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\coor     #
#                          ±∏∑›\ARM\Coor for ARM 3.1(ÃÌº”÷∏¡Ó…œ¥´À˘”–≥ı ºªØ ˝ #
#                          æ›£©\Projects\zstack\MyCoordinator\Coordinator\CC2 #
#                          530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg"        #
#                          (-DCPU32MHZ -DROOT=__near_func                     #
#                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                   #
#                          -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8         #
#                          -DMAC_CFG_RX_MAX=5 -DZDO_COORDINATOR -DRTR_NWK)    #
#                          -f "C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\coor     #
#                          ±∏∑›\ARM\Coor for ARM 3.1(ÃÌº”÷∏¡Ó…œ¥´À˘”–≥ı ºªØ ˝ #
#                          æ›£©\Projects\zstack\MyCoordinator\Coordinator\CC2 #
#                          530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"       #
#                          (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0      #
#                          -DREFLECTOR -DDEFAULT_CHANLIST=0x02000000          #
#                          -DZDAPP_CONFIG_PAN_ID=0x0030                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 "C:\Users\William\Desktop\± #
#                          œ“µ…Ëº∆\SRC\coor ±∏∑›\ARM\Coor for ARM             #
#                          3.1(ÃÌº”÷∏¡Ó…œ¥´À˘”–≥ı ºªØ ˝æ›£©\Projects\zstack\M #
#                          yCoordinator\Coordinator\Source\CoordinatorApp.c"  #
#                          -D ZTOOL_P1 -D NV_RESTORE=1 -lC                    #
#                          "C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\coor        #
#                          ±∏∑›\ARM\Coor for ARM 3.1(ÃÌº”÷∏¡Ó…œ¥´À˘”–≥ı ºªØ ˝ #
#                          æ›£©\Projects\zstack\MyCoordinator\Coordinator\CC2 #
#                          530DB\CoordinatorEB\List\" -lA                     #
#                          "C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\coor        #
#                          ±∏∑›\ARM\Coor for ARM 3.1(ÃÌº”÷∏¡Ó…œ¥´À˘”–≥ı ºªØ ˝ #
#                          æ›£©\Projects\zstack\MyCoordinator\Coordinator\CC2 #
#                          530DB\CoordinatorEB\List\" --diag_suppress         #
#                          Pe001,Pa010 -o "C:\Users\William\Desktop\±œ“µ…Ëº∆\ #
#                          SRC\coor ±∏∑›\ARM\Coor for ARM                     #
#                          3.1(ÃÌº”÷∏¡Ó…œ¥´À˘”–≥ı ºªØ ˝æ›£©\Projects\zstack\M #
#                          yCoordinator\Coordinator\CC2530DB\CoordinatorEB\Ob #
#                          j\" -e --no_code_motion --debug --core=plain       #
#                          --dptr=16,1 --data_model=large                     #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 16 -I "C:\Users\William\Desktop\ #
#                          ±œ“µ…Ëº∆\SRC\coor ±∏∑›\ARM\Coor for ARM            #
#                          3.1(ÃÌº”÷∏¡Ó…œ¥´À˘”–≥ı ºªØ ˝æ›£©\Projects\zstack\M #
#                          yCoordinator\Coordinator\CC2530DB\" -I             #
#                          "C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\coor        #
#                          ±∏∑›\ARM\Coor for ARM 3.1(ÃÌº”÷∏¡Ó…œ¥´À˘”–≥ı ºªØ ˝ #
#                          æ›£©\Projects\zstack\MyCoordinator\Coordinator\CC2 #
#                          530DB\..\Source\" -I "C:\Users\William\Desktop\±œ“ #
#                          µ…Ëº∆\SRC\coor ±∏∑›\ARM\Coor for ARM               #
#                          3.1(ÃÌº”÷∏¡Ó…œ¥´À˘”–≥ı ºªØ ˝æ›£©\Projects\zstack\M #
#                          yCoordinator\Coordinator\CC2530DB\..\..\..\ZMain\T #
#                          I2530DB\" -I "C:\Users\William\Desktop\±œ“µ…Ëº∆\SR #
#                          C\coor ±∏∑›\ARM\Coor for ARM                       #
#                          3.1(ÃÌº”÷∏¡Ó…œ¥´À˘”–≥ı ºªØ ˝æ›£©\Projects\zstack\M #
#                          yCoordinator\Coordinator\CC2530DB\..\..\..\..\..\C #
#                          omponents\hal\include\" -I                         #
#                          "C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\coor        #
#                          ±∏∑›\ARM\Coor for ARM 3.1(ÃÌº”÷∏¡Ó…œ¥´À˘”–≥ı ºªØ ˝ #
#                          æ›£©\Projects\zstack\MyCoordinator\Coordinator\CC2 #
#                          530DB\..\..\..\..\..\Components\hal\target\CC2530E #
#                          B\" -I "C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\coor #
#                           ±∏∑›\ARM\Coor for ARM 3.1(ÃÌº”÷∏¡Ó…œ¥´À˘”–≥ı ºªØ  #
#                          ˝æ›£©\Projects\zstack\MyCoordinator\Coordinator\CC #
#                          2530DB\..\..\..\..\..\Components\mac\include\" -I  #
#                          "C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\coor        #
#                          ±∏∑›\ARM\Coor for ARM 3.1(ÃÌº”÷∏¡Ó…œ¥´À˘”–≥ı ºªØ ˝ #
#                          æ›£©\Projects\zstack\MyCoordinator\Coordinator\CC2 #
#                          530DB\..\..\..\..\..\Components\mac\high_level\"   #
#                          -I "C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\coor     #
#                          ±∏∑›\ARM\Coor for ARM 3.1(ÃÌº”÷∏¡Ó…œ¥´À˘”–≥ı ºªØ ˝ #
#                          æ›£©\Projects\zstack\MyCoordinator\Coordinator\CC2 #
#                          530DB\..\..\..\..\..\Components\mac\low_level\srf0 #
#                          4\" -I "C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\coor #
#                           ±∏∑›\ARM\Coor for ARM 3.1(ÃÌº”÷∏¡Ó…œ¥´À˘”–≥ı ºªØ  #
#                          ˝æ›£©\Projects\zstack\MyCoordinator\Coordinator\CC #
#                          2530DB\..\..\..\..\..\Components\mac\low_level\srf #
#                          04\single_chip\" -I "C:\Users\William\Desktop\±œ“µ #
#                          …Ëº∆\SRC\coor ±∏∑›\ARM\Coor for ARM                #
#                          3.1(ÃÌº”÷∏¡Ó…œ¥´À˘”–≥ı ºªØ ˝æ›£©\Projects\zstack\M #
#                          yCoordinator\Coordinator\CC2530DB\..\..\..\..\..\C #
#                          omponents\mt\" -I "C:\Users\William\Desktop\±œ“µ…Ë #
#                          º∆\SRC\coor ±∏∑›\ARM\Coor for ARM                  #
#                          3.1(ÃÌº”÷∏¡Ó…œ¥´À˘”–≥ı ºªØ ˝æ›£©\Projects\zstack\M #
#                          yCoordinator\Coordinator\CC2530DB\..\..\..\..\..\C #
#                          omponents\osal\include\" -I                        #
#                          "C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\coor        #
#                          ±∏∑›\ARM\Coor for ARM 3.1(ÃÌº”÷∏¡Ó…œ¥´À˘”–≥ı ºªØ ˝ #
#                          æ›£©\Projects\zstack\MyCoordinator\Coordinator\CC2 #
#                          530DB\..\..\..\..\..\Components\services\saddr\"   #
#                          -I "C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\coor     #
#                          ±∏∑›\ARM\Coor for ARM 3.1(ÃÌº”÷∏¡Ó…œ¥´À˘”–≥ı ºªØ ˝ #
#                          æ›£©\Projects\zstack\MyCoordinator\Coordinator\CC2 #
#                          530DB\..\..\..\..\..\Components\services\sdata\"   #
#                          -I "C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\coor     #
#                          ±∏∑›\ARM\Coor for ARM 3.1(ÃÌº”÷∏¡Ó…œ¥´À˘”–≥ı ºªØ ˝ #
#                          æ›£©\Projects\zstack\MyCoordinator\Coordinator\CC2 #
#                          530DB\..\..\..\..\..\Components\stack\af\" -I      #
#                          "C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\coor        #
#                          ±∏∑›\ARM\Coor for ARM 3.1(ÃÌº”÷∏¡Ó…œ¥´À˘”–≥ı ºªØ ˝ #
#                          æ›£©\Projects\zstack\MyCoordinator\Coordinator\CC2 #
#                          530DB\..\..\..\..\..\Components\stack\nwk\" -I     #
#                          "C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\coor        #
#                          ±∏∑›\ARM\Coor for ARM 3.1(ÃÌº”÷∏¡Ó…œ¥´À˘”–≥ı ºªØ ˝ #
#                          æ›£©\Projects\zstack\MyCoordinator\Coordinator\CC2 #
#                          530DB\..\..\..\..\..\Components\stack\sapi\" -I    #
#                          "C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\coor        #
#                          ±∏∑›\ARM\Coor for ARM 3.1(ÃÌº”÷∏¡Ó…œ¥´À˘”–≥ı ºªØ ˝ #
#                          æ›£©\Projects\zstack\MyCoordinator\Coordinator\CC2 #
#                          530DB\..\..\..\..\..\Components\stack\sec\" -I     #
#                          "C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\coor        #
#                          ±∏∑›\ARM\Coor for ARM 3.1(ÃÌº”÷∏¡Ó…œ¥´À˘”–≥ı ºªØ ˝ #
#                          æ›£©\Projects\zstack\MyCoordinator\Coordinator\CC2 #
#                          530DB\..\..\..\..\..\Components\stack\sys\" -I     #
#                          "C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\coor        #
#                          ±∏∑›\ARM\Coor for ARM 3.1(ÃÌº”÷∏¡Ó…œ¥´À˘”–≥ı ºªØ ˝ #
#                          æ›£©\Projects\zstack\MyCoordinator\Coordinator\CC2 #
#                          530DB\..\..\..\..\..\Components\stack\zdo\" -I     #
#                          "C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\coor        #
#                          ±∏∑›\ARM\Coor for ARM 3.1(ÃÌº”÷∏¡Ó…œ¥´À˘”–≥ı ºªØ ˝ #
#                          æ›£©\Projects\zstack\MyCoordinator\Coordinator\CC2 #
#                          530DB\..\..\..\..\..\Components\zmac\" -I          #
#                          "C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\coor        #
#                          ±∏∑›\ARM\Coor for ARM 3.1(ÃÌº”÷∏¡Ó…œ¥´À˘”–≥ı ºªØ ˝ #
#                          æ›£©\Projects\zstack\MyCoordinator\Coordinator\CC2 #
#                          530DB\..\..\..\..\..\Components\zmac\f8w\" -Ohz    #
#                          --require_prototypes                               #
#    List file          =  C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\coor         #
#                          ±∏∑›\ARM\Coor for ARM 3.1(ÃÌº”÷∏¡Ó…œ¥´À˘”–≥ı ºªØ ˝ #
#                          æ›£©\Projects\zstack\MyCoordinator\Coordinator\CC2 #
#                          530DB\CoordinatorEB\List\CoordinatorApp.lst        #
#    Object file        =  C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\coor         #
#                          ±∏∑›\ARM\Coor for ARM 3.1(ÃÌº”÷∏¡Ó…œ¥´À˘”–≥ı ºªØ ˝ #
#                          æ›£©\Projects\zstack\MyCoordinator\Coordinator\CC2 #
#                          530DB\CoordinatorEB\Obj\CoordinatorApp.r51         #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\William\Desktop\±œ“µ…Ëº∆\SRC\coor ±∏∑›\ARM\Coor for ARM 3.1(ÃÌº”÷∏¡Ó…œ¥´À˘”–≥ı ºªØ ˝æ›£©\Projects\zstack\MyCoordinator\Coordinator\Source\CoordinatorApp.c
      1          /**************************************************************************************************
      2            Filename:       CoordinatorApp.c
      3            Revised:        $Date: 2009-03-18 15:56:27 -0700 (Wed, 18 Mar 2009) $
      4            Revision:       $Revision: 19453 $
      5          
      6            Description:    Coordinator Application (no Profile).
      7          
      8          
      9            Copyright 2007 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software mdsay not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED ìAS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          
     44          #include "CoordinatorVariable.h"

   \                                 In  segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IEN0
   \                     _A_IEN0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc9
   \   unsigned char volatile __sfr WDCTL
   \                     WDCTL:
   \   000000                DS 1
     45          #include "CoordinatorAF.h"
     46          #include "CoordinatorApp.h"
     47          #include "hal_lcd.h"
     48          
     49          /*********************************************************************
     50           * MACROS
     51           */
     52          
     53          /*********************************************************************
     54           * CONSTANTS
     55           */
     56          
     57          /*********************************************************************
     58           * TYPEDEFS
     59           */
     60          
     61          /*********************************************************************
     62           * GLOBAL VARIABLES
     63           */
     64          
     65          // This list should be filled with Application specific Cluster IDs.
     66          
     67          
     68          // This is the Endpoint/Interface description.  It is defined here, but
     69          // filled-in in CoordinatorApp_Init().  Another way to go would be to fill
     70          // in the structure here and make it a "const" (in code space).  The
     71          // way it's defined in this Coordinator app it is define in RAM.
     72          
     73          
     74          /*********************************************************************
     75           * EXTERNAL VARIABLES
     76           */
     77          
     78          /*********************************************************************
     79           * EXTERNAL FUNCTIONS
     80           */
     81          
     82          /*********************************************************************
     83           * LOCAL VARIABLES
     84           */
     85          
     86          
     87          /*********************************************************************
     88           * LOCAL FUNCTIONS
     89           */
     90          void CoordinatorApp_CMDSerial(mtOSALSerialData_t *Msg);   // Ω” ’¥Æø⁄ ˝æ›≤¢¥¶¿Ì
     91          /*********************************************************************
     92           * NETWORK LAYER CALLBACKS
     93           */
     94          
     95          /*********************************************************************
     96           * PUBLIC FUNCTIONS
     97           */
     98          
     99          /*********************************************************************
    100           * @fn      CoordinatorApp_Init
    101           *
    102           * @brief   Initialization function for the Generic App Task.
    103           *          This is called during initialization and should contain
    104           *          any application specific initialization (ie. hardware
    105           *          initialization/setup, table initialization, power up
    106           *          notificaiton ... ).
    107           *
    108           * @param   task_id - the ID assigned by OSAL.  This ID should be
    109           *                    used to send messages and set timers.
    110           *
    111           * @return  none
    112           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    113          void CoordinatorApp_Init( uint8 task_id )
   \                     CoordinatorApp_Init:
    114          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    115            CoordinatorApp_TaskID = task_id;
   \   000007   90....       MOV     DPTR,#CoordinatorApp_TaskID
   \   00000A   F0           MOVX    @DPTR,A
    116            CoordinatorApp_NwkState = DEV_INIT;
   \   00000B   90....       MOV     DPTR,#CoordinatorApp_NwkState
   \   00000E   7401         MOV     A,#0x1
   \   000010   F0           MOVX    @DPTR,A
    117            CoordinatorApp_TransID = 0;
   \   000011   90....       MOV     DPTR,#CoordinatorApp_TransID
   \   000014   E4           CLR     A
   \   000015   F0           MOVX    @DPTR,A
    118            
    119            MT_UartInit();
   \   000016                ; Setup parameters for call to function MT_UartInit
   \   000016   12....       LCALL   ??MT_UartInit?relay
    120            MT_UartRegisterTaskID(task_id);
   \   000019                ; Setup parameters for call to function MT_UartRegisterTaskID
   \   000019   EE           MOV     A,R6
   \   00001A   F9           MOV     R1,A
   \   00001B   12....       LCALL   ??MT_UartRegisterTaskID?relay
    121            PANID =  _NIB.nwkPanId;
   \   00001E   12....       LCALL   ?Subroutine2 & 0xFFFF
    122            
    123            
    124            //for debug use
    125            /*uint8 panid;  
    126            panid = (uint8)((PANID >> 8) & 0x00ff);
    127            HalUARTWrite(0,&panid,1);
    128            panid = (uint8)((PANID) & 0x00ff);
    129            HalUARTWrite(0,&panid,1);*/
    130          
    131            // Device hardware initialization can be added here or in main() (Zmain.c).
    132            // If the hardware is application specific - add it here.
    133            // If the hardware is other parts of the device add it in main().
    134          
    135           #if defined ( BUILD_ALL_DEVICES )
    136            // The "Demo" target is setup to have BUILD_ALL_DEVICES and HOLD_AUTO_START
    137            // We are looking at a jumper (defined in CoordinatorAppHw.c) to be jumpered
    138            // together - if they are - we will start up a coordinator. Otherwise,
    139            // the device will start as a router.
    140          #endif // BUILD_ALL_DEVICES
    141          
    142          #if defined ( HOLD_AUTO_START )
    143            // HOLD_AUTO_START is a compile option that will surpress ZDApp
    144            //  from starting the device and wait for the application to
    145            //  start the device.
    146            ZDOInitDevice(0);
    147          #endif
    148          
    149            // Setup for the periodic message's destination address
    150            // Broadcast to everyone
    151            CoordinatorApp_Broadcast_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
   \                     ??CrossCallReturnLabel_2:
   \   000021   90....       MOV     DPTR,#CoordinatorApp_Broadcast_DstAddr + 8
   \   000024   740F         MOV     A,#0xf
   \   000026   F0           MOVX    @DPTR,A
    152            CoordinatorApp_Broadcast_DstAddr.endPoint = CoordinatorAPP_ENDPOINT;
   \   000027   A3           INC     DPTR
   \   000028   7414         MOV     A,#0x14
   \   00002A   F0           MOVX    @DPTR,A
    153            CoordinatorApp_Broadcast_DstAddr.addr.shortAddr = 0xFFFF;
   \   00002B   90....       MOV     DPTR,#CoordinatorApp_Broadcast_DstAddr
   \   00002E   74FF         MOV     A,#-0x1
   \   000030   F0           MOVX    @DPTR,A
   \   000031   A3           INC     DPTR
   \   000032   F0           MOVX    @DPTR,A
    154          
    155            // Setup for the flash command's destination address - Group 1
    156            CoordinatorApp_Group_DstAddr.addrMode = (afAddrMode_t)afAddrGroup;
   \   000033   90....       MOV     DPTR,#CoordinatorApp_Group_DstAddr + 8
   \   000036   7401         MOV     A,#0x1
   \   000038   F0           MOVX    @DPTR,A
    157            CoordinatorApp_Group_DstAddr.endPoint = CoordinatorAPP_ENDPOINT;
   \   000039   A3           INC     DPTR
   \   00003A   7414         MOV     A,#0x14
   \   00003C   F0           MOVX    @DPTR,A
    158            CoordinatorApp_Group_DstAddr.addr.shortAddr = GroupId;
   \   00003D   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   000040   90....       MOV     DPTR,#CoordinatorApp_Group_DstAddr
   \   000043   E8           MOV     A,R0
   \   000044   F0           MOVX    @DPTR,A
   \   000045   A3           INC     DPTR
   \   000046   E9           MOV     A,R1
   \   000047   F0           MOVX    @DPTR,A
    159            
    160            CoordinatorApp_P2PDstAddr.addrMode = (afAddrMode_t)afAddr16Bit;
   \   000048   90....       MOV     DPTR,#CoordinatorApp_P2PDstAddr + 8
   \   00004B   7402         MOV     A,#0x2
   \   00004D   F0           MOVX    @DPTR,A
    161            CoordinatorApp_P2PDstAddr.endPoint = CoordinatorAPP_ENDPOINT;
   \   00004E   A3           INC     DPTR
   \   00004F   7414         MOV     A,#0x14
   \   000051   F0           MOVX    @DPTR,A
    162            CoordinatorApp_P2PDstAddr.addr.shortAddr = 0x0000;
   \   000052   90....       MOV     DPTR,#CoordinatorApp_P2PDstAddr
   \   000055   E4           CLR     A
   \   000056   F0           MOVX    @DPTR,A
   \   000057   A3           INC     DPTR
   \   000058   F0           MOVX    @DPTR,A
    163            
    164            // Fill out the endpoint description.
    165            CoordinatorApp_epDesc.endPoint = CoordinatorAPP_ENDPOINT;
   \   000059   90....       MOV     DPTR,#CoordinatorApp_epDesc
   \   00005C   7414         MOV     A,#0x14
   \   00005E   F0           MOVX    @DPTR,A
    166            CoordinatorApp_epDesc.task_id = &CoordinatorApp_TaskID;
   \   00005F   A3           INC     DPTR
   \   000060   74..         MOV     A,#CoordinatorApp_TaskID & 0xff
   \   000062   F0           MOVX    @DPTR,A
   \   000063   A3           INC     DPTR
   \   000064   74..         MOV     A,#(CoordinatorApp_TaskID >> 8) & 0xff
   \   000066   F0           MOVX    @DPTR,A
    167            CoordinatorApp_epDesc.simpleDesc
    168                      = (SimpleDescriptionFormat_t *)&CoordinatorApp_SimpleDesc;
   \   000067   A3           INC     DPTR
   \   000068   74..         MOV     A,#CoordinatorApp_SimpleDesc & 0xff
   \   00006A   F0           MOVX    @DPTR,A
   \   00006B   A3           INC     DPTR
   \   00006C   74..         MOV     A,#(CoordinatorApp_SimpleDesc >> 8) & 0xff
   \   00006E   F0           MOVX    @DPTR,A
    169            CoordinatorApp_epDesc.latencyReq = noLatencyReqs;
   \   00006F   A3           INC     DPTR
   \   000070   E4           CLR     A
   \   000071   F0           MOVX    @DPTR,A
    170          
    171            // Register the endpoint description with the AF
    172            afRegister( &CoordinatorApp_epDesc );
   \   000072                ; Setup parameters for call to function afRegister
   \   000072   7A..         MOV     R2,#CoordinatorApp_epDesc & 0xff
   \   000074   7B..         MOV     R3,#(CoordinatorApp_epDesc >> 8) & 0xff
   \   000076   12....       LCALL   ??afRegister?relay
    173          
    174            // Register for all key events - This app will handle all key events
    175            RegisterForKeys( CoordinatorApp_TaskID );
   \   000079                ; Setup parameters for call to function RegisterForKeys
   \   000079   90....       MOV     DPTR,#CoordinatorApp_TaskID
   \   00007C   E0           MOVX    A,@DPTR
   \   00007D   F9           MOV     R1,A
   \   00007E   12....       LCALL   ??RegisterForKeys?relay
    176          
    177            // By default, all devices start out in Group 1
    178            CoordinatorApp_Group.ID = GroupId;//0x0001
   \   000081   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   000084   90....       MOV     DPTR,#CoordinatorApp_Group
   \   000087   E8           MOV     A,R0
   \   000088   F0           MOVX    @DPTR,A
   \   000089   A3           INC     DPTR
   \   00008A   E9           MOV     A,R1
   \   00008B   F0           MOVX    @DPTR,A
    179            osal_memcpy( CoordinatorApp_Group.name, "Group 1", 7  );
   \   00008C                ; Setup parameters for call to function osal_memcpy
   \   00008C   75....       MOV     ?V0 + 0,#`?<Constant "Group 1">` & 0xff
   \   00008F   75....       MOV     ?V0 + 1,#(`?<Constant "Group 1">` >> 8) & 0xff
   \   000092   75..00       MOV     ?V0 + 2,#0x0
   \   000095   78..         MOV     R0,#?V0 + 0
   \   000097   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00009A   7C07         MOV     R4,#0x7
   \   00009C   7D00         MOV     R5,#0x0
   \   00009E   7A..         MOV     R2,#(CoordinatorApp_Group + 2) & 0xff
   \   0000A0   7B..         MOV     R3,#((CoordinatorApp_Group + 2) >> 8) & 0xff
   \   0000A2   12....       LCALL   ??osal_memcpy?relay
   \   0000A5   7403         MOV     A,#0x3
   \   0000A7   12....       LCALL   ?DEALLOC_XSTACK8
    180            aps_AddGroup( CoordinatorAPP_ENDPOINT, &CoordinatorApp_Group );
   \   0000AA                ; Setup parameters for call to function aps_AddGroup
   \   0000AA   7A..         MOV     R2,#CoordinatorApp_Group & 0xff
   \   0000AC   7B..         MOV     R3,#(CoordinatorApp_Group >> 8) & 0xff
   \   0000AE   7914         MOV     R1,#0x14
   \   0000B0   12....       LCALL   ??aps_AddGroup?relay
    181            HalLcd_HW_WaitMs(3000);
   \   0000B3                ; Setup parameters for call to function HalLcd_HW_WaitMs
   \   0000B3   7AB8         MOV     R2,#-0x48
   \   0000B5   7B0B         MOV     R3,#0xb
   \   0000B7   12....       LCALL   ??HalLcd_HW_WaitMs?relay
    182            
    183          }
   \   0000BA   7F03         MOV     R7,#0x3
   \   0000BC   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   90....       MOV     DPTR,#GroupId
   \   000003                REQUIRE ??Subroutine5_0
   \   000003                ; // Fall through to label ??Subroutine5_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine5_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   90....       MOV     DPTR,#_NIB + 33
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F8           MOV     R0,A
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   F9           MOV     R1,A
   \   000008   90....       MOV     DPTR,#PANID
   \   00000B   E8           MOV     A,R0
   \   00000C   F0           MOVX    @DPTR,A
   \   00000D   A3           INC     DPTR
   \   00000E   E9           MOV     A,R1
   \   00000F   F0           MOVX    @DPTR,A
   \   000010   22           RET
    184          
    185          /*********************************************************************
    186           * @fn      CoordinatorApp_ProcessEvent
    187           *
    188           * @brief   Generic Application Task event processor.  This function
    189           *          is called to process all events for the task.  Events
    190           *          include timers, messages and any other user defined events.
    191           *
    192           * @param   task_id  - The OSAL assigned task ID.
    193           * @param   events - events to process.  This is a bit map and can
    194           *                   contain more than one event.
    195           *
    196           * @return  none
    197           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    198          uint16 CoordinatorApp_ProcessEvent( uint8 task_id, uint16 events )
   \                     CoordinatorApp_ProcessEvent:
    199          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    200            afIncomingMSGPacket_t *MSGpkt;
    201            (void)task_id;  // Intentionally unreferenced parameter
    202          
    203            if ( events & SYS_EVENT_MSG )
   \   00000E   5480         ANL     A,#0x80
   \   000010   7003         JNZ     $+5
   \   000012   02....       LJMP    ??CoordinatorApp_ProcessEvent_0 & 0xFFFF
    204            {
    205              MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( CoordinatorApp_TaskID );
   \   000015                ; Setup parameters for call to function osal_msg_receive
   \   000015   805D         SJMP    ??CoordinatorApp_ProcessEvent_1
    206              while ( MSGpkt )
    207              {
    208                switch ( MSGpkt->hdr.event)
    209                {
    210                case CMD_SERIAL_MSG :
    211                     CoordinatorApp_CMDSerial((mtOSALSerialData_t *)MSGpkt);
    212                     break;
    213                  // Received when a messages is received (OTA) for this endpoint
    214                  case AF_INCOMING_MSG_CMD:
    215                    CoordinatorApp_HandleAfIncomingMessage( MSGpkt );
    216                    break;
    217                  // Received whenever the device changes state in the network
    218                  case ZDO_STATE_CHANGE:
    219                    CoordinatorApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
   \                     ??CoordinatorApp_ProcessEvent_2:
   \   000017   A3           INC     DPTR
   \   000018   E0           MOVX    A,@DPTR
   \   000019   90....       MOV     DPTR,#CoordinatorApp_NwkState
   \   00001C   F0           MOVX    @DPTR,A
    220                    if ((CoordinatorApp_NwkState == DEV_ZB_COORD))
   \   00001D   6409         XRL     A,#0x9
   \   00001F   704C         JNZ     ??CrossCallReturnLabel_8
    221                    {
    222                     // NLME_RestoreFromNV();
    223                      // tell the arm the Personal Area Net with PANID is created 
    224                      uint8 str[4] = {0x00,0x00,0x00,0x00};
   \   000021   90....       MOV     DPTR,#`?<Constant {0, 0, 0, 0}>`
   \   000024   C082         PUSH    DPL
   \   000026   85..82       MOV     DPL,?XSP + 0
   \   000029   85..83       MOV     DPH,?XSP + 1
   \   00002C   AC82         MOV     R4,DPL
   \   00002E   AD83         MOV     R5,DPH
   \   000030   7583..       MOV     DPH,#(`?<Constant {0, 0, 0, 0}>` >> 8) & 0xff
   \   000033   D082         POP     DPL
   \   000035   7404         MOV     A,#0x4
   \   000037   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    225                      PANID =  _NIB.nwkPanId;
   \   00003A   12....       LCALL   ?Subroutine2 & 0xFFFF
    226                     /* str[4] = (uint8)((PANID >> 8) & 0x00ff);
    227                      str[5] = (uint8)((PANID) & 0x00ff);
    228                      CoordinatorWriteUART(str,6);*/
    229                     str[FRAME_LEN] = 1;
   \                     ??CrossCallReturnLabel_3:
   \   00003D   85..82       MOV     DPL,?XSP + 0
   \   000040   85..83       MOV     DPH,?XSP + 1
   \   000043   7401         MOV     A,#0x1
   \   000045   F0           MOVX    @DPTR,A
    230                     str[FRAME_CMD] = CMD_INIT_COOR;
   \   000046   04           INC     A
   \   000047   12....       LCALL   ?XSTACK_DISP0_8
   \   00004A   7411         MOV     A,#0x11
   \   00004C   F0           MOVX    @DPTR,A
    231                     str[FRAME_PARAHIGH] = (0x00ff & _NIB.nwkPanId);
   \   00004D   90....       MOV     DPTR,#_NIB + 33
   \   000050   E0           MOVX    A,@DPTR
   \   000051   C0E0         PUSH    A
   \   000053   7403         MOV     A,#0x3
   \   000055   12....       LCALL   ?XSTACK_DISP0_8
   \   000058   D0E0         POP     A
   \   00005A   F0           MOVX    @DPTR,A
    232                     CoordinatorWriteUART(str,4);  // tell the gateway the panid;
   \   00005B                ; Setup parameters for call to function CoordinatorWriteUART
   \   00005B   7904         MOV     R1,#0x4
   \   00005D   85..82       MOV     DPL,?XSP + 0
   \   000060   85..83       MOV     DPH,?XSP + 1
   \   000063   AA82         MOV     R2,DPL
   \   000065   AB83         MOV     R3,DPH
   \   000067   12....       LCALL   ??CoordinatorWriteUART?relay
    233                      // Start count the tick_alive of the AddrList
    234                
    235                      osal_start_timerEx( CoordinatorApp_TaskID,
    236                                        CoordinatorAPP_TICK_ALIVE_MSG_EVT,
    237                                       6000);
   \   00006A                ; Setup parameters for call to function osal_start_timerEx
   \   00006A   12....       LCALL   ?Subroutine3 & 0xFFFF
    238                      
    239                    }
    240                    else
    241                    {
    242                     //  no existing on the network
    243                    }
    244                    break;
    245                   
    246          
    247                  default:
    248                    break;
    249                }
    250          
    251                // Release the memory
    252                osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??CrossCallReturnLabel_8:
   \   00006D                ; Setup parameters for call to function osal_msg_deallocate
   \   00006D   AA..         MOV     R2,?V0 + 0
   \   00006F   AB..         MOV     R3,?V0 + 1
   \   000071   12....       LCALL   ??osal_msg_deallocate?relay
    253          
    254                // Next - if one is available
    255                MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( CoordinatorApp_TaskID );
   \   000074                ; Setup parameters for call to function osal_msg_receive
   \                     ??CoordinatorApp_ProcessEvent_1:
   \   000074   90....       MOV     DPTR,#CoordinatorApp_TaskID
   \   000077   E0           MOVX    A,@DPTR
   \   000078   F9           MOV     R1,A
   \   000079   12....       LCALL   ??osal_msg_receive?relay
   \   00007C   8A..         MOV     ?V0 + 0,R2
   \   00007E   8B..         MOV     ?V0 + 1,R3
   \   000080   E5..         MOV     A,?V0 + 0
   \   000082   45..         ORL     A,?V0 + 1
   \   000084   6029         JZ      ??CoordinatorApp_ProcessEvent_3
   \   000086   85..82       MOV     DPL,?V0 + 0
   \   000089   85..83       MOV     DPH,?V0 + 1
   \   00008C   E0           MOVX    A,@DPTR
   \   00008D   14           DEC     A
   \   00008E   600D         JZ      ??CoordinatorApp_ProcessEvent_4
   \   000090   24E7         ADD     A,#-0x19
   \   000092   6012         JZ      ??CoordinatorApp_ProcessEvent_5
   \   000094   2449         ADD     A,#0x49
   \   000096   7003         JNZ     $+5
   \   000098   02....       LJMP    ??CoordinatorApp_ProcessEvent_2 & 0xFFFF
   \   00009B   80D0         SJMP    ??CrossCallReturnLabel_8
   \                     ??CoordinatorApp_ProcessEvent_4:
   \   00009D                ; Setup parameters for call to function CoordinatorApp_CMDSerial
   \   00009D   AA..         MOV     R2,?V0 + 0
   \   00009F   AB..         MOV     R3,?V0 + 1
   \   0000A1   12....       LCALL   ??CoordinatorApp_CMDSerial?relay
   \   0000A4   80C7         SJMP    ??CrossCallReturnLabel_8
   \                     ??CoordinatorApp_ProcessEvent_5:
   \   0000A6                ; Setup parameters for call to function CoordinatorApp_HandleAfIncomingMessage
   \   0000A6   AA..         MOV     R2,?V0 + 0
   \   0000A8   AB..         MOV     R3,?V0 + 1
   \   0000AA   12....       LCALL   ??CoordinatorApp_HandleAfIncomingMessage?relay
   \   0000AD   80BE         SJMP    ??CrossCallReturnLabel_8
    256              }
    257          
    258              // return unprocessed events
    259              return (events ^ SYS_EVENT_MSG);
   \                     ??CoordinatorApp_ProcessEvent_3:
   \   0000AF   EE           MOV     A,R6
   \   0000B0   FA           MOV     R2,A
   \   0000B1   EF           MOV     A,R7
   \   0000B2   6480         XRL     A,#0x80
   \                     ??CoordinatorApp_ProcessEvent_6:
   \   0000B4   FB           MOV     R3,A
   \   0000B5   807F         SJMP    ??CoordinatorApp_ProcessEvent_7
    260            }
    261          
    262            
    263            if(events & CoordinatorAPP_TICK_ALIVE_MSG_EVT)
   \                     ??CoordinatorApp_ProcessEvent_0:
   \   0000B7   EE           MOV     A,R6
   \   0000B8   A2E0         MOV     C,0xE0 /* A   */.0
   \   0000BA   5066         JNC     ??CoordinatorApp_ProcessEvent_8
    264            {
    265              uint8 i = 0;
    266              for(i = 0; i < DEVICEID_MAX; i++)
   \   0000BC   7A00         MOV     R2,#0x0
    267              {
    268                  if(AddrList[i].tick_alive == 0)
   \                     ??CoordinatorApp_ProcessEvent_9:
   \   0000BE   8A..         MOV     ?V0 + 0,R2
   \   0000C0   75..00       MOV     ?V0 + 1,#0x0
   \   0000C3   7402         MOV     A,#0x2
   \   0000C5   78..         MOV     R0,#?V0 + 0
   \   0000C7   12....       LCALL   ?S_SHL
   \   0000CA   74..         MOV     A,#(AddrList + 3) & 0xff
   \   0000CC   25..         ADD     A,?V0 + 0
   \   0000CE   F582         MOV     DPL,A
   \   0000D0   74..         MOV     A,#((AddrList + 3) >> 8) & 0xff
   \   0000D2   35..         ADDC    A,?V0 + 1
   \   0000D4   F583         MOV     DPH,A
   \   0000D6   E0           MOVX    A,@DPTR
   \   0000D7   8A..         MOV     ?V0 + 0,R2
   \   0000D9   75..00       MOV     ?V0 + 1,#0x0
   \   0000DC   701C         JNZ     ??CoordinatorApp_ProcessEvent_10
    269                  {
    270                      AddrList[i].status = FALSE;
   \   0000DE   7402         MOV     A,#0x2
   \   0000E0   78..         MOV     R0,#?V0 + 0
   \   0000E2   12....       LCALL   ?S_SHL
   \   0000E5   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   0000E8   E4           CLR     A
   \   0000E9   F0           MOVX    @DPTR,A
    271                      AddrList[i].tick_alive = 0;
   \   0000EA   8882         MOV     DPL,R0
   \   0000EC   8983         MOV     DPH,R1
   \   0000EE   A3           INC     DPTR
   \   0000EF   A3           INC     DPTR
   \   0000F0   A3           INC     DPTR
   \   0000F1   F0           MOVX    @DPTR,A
    272                      AddrList[i].addr = 0x0000;
   \   0000F2   8882         MOV     DPL,R0
   \   0000F4   8983         MOV     DPH,R1
   \   0000F6   F0           MOVX    @DPTR,A
   \   0000F7   A3           INC     DPTR
   \   0000F8   8016         SJMP    ??CoordinatorApp_ProcessEvent_11
    273                  }
    274                  else
    275                  {
    276                       AddrList[i].tick_alive--;
   \                     ??CoordinatorApp_ProcessEvent_10:
   \   0000FA   7402         MOV     A,#0x2
   \   0000FC   78..         MOV     R0,#?V0 + 0
   \   0000FE   12....       LCALL   ?S_SHL
   \   000101   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   000104   A3           INC     DPTR
   \   000105   E0           MOVX    A,@DPTR
   \   000106   14           DEC     A
   \   000107   F0           MOVX    @DPTR,A
    277                       AddrList[i].status = TRUE;
   \   000108   8882         MOV     DPL,R0
   \   00010A   8983         MOV     DPH,R1
   \   00010C   A3           INC     DPTR
   \   00010D   A3           INC     DPTR
   \   00010E   7401         MOV     A,#0x1
   \                     ??CoordinatorApp_ProcessEvent_11:
   \   000110   F0           MOVX    @DPTR,A
    278                  }
    279              }
   \   000111   0A           INC     R2
   \   000112   EA           MOV     A,R2
   \   000113   C3           CLR     C
   \   000114   9464         SUBB    A,#0x64
   \   000116   40A6         JC      ??CoordinatorApp_ProcessEvent_9
    280              osal_start_timerEx( CoordinatorApp_TaskID,
    281                                        CoordinatorAPP_TICK_ALIVE_MSG_EVT,
    282                                       6000); 
   \   000118                ; Setup parameters for call to function osal_start_timerEx
   \   000118   12....       LCALL   ?Subroutine3 & 0xFFFF
    283              return (events ^ CoordinatorAPP_TICK_ALIVE_MSG_EVT);// it's very important to clear the events after handeling the events
   \                     ??CrossCallReturnLabel_9:
   \   00011B   EE           MOV     A,R6
   \   00011C   6401         XRL     A,#0x1
   \   00011E   FA           MOV     R2,A
   \   00011F   EF           MOV     A,R7
   \   000120   8092         SJMP    ??CoordinatorApp_ProcessEvent_6
    284            }
    285            
    286            //  (the rest event trrigered by change PANID  ).
    287            if ( events & CoordinatorAPP_REST_MSG_EVT)
   \                     ??CoordinatorApp_ProcessEvent_8:
   \   000122   5402         ANL     A,#0x2
   \   000124   600C         JZ      ??CoordinatorApp_ProcessEvent_12
    288            {
    289               SystemReset();
   \   000126   C2AF         CLR     0xa8.7
   \   000128   C2AF         CLR     0xa8.7
   \   00012A   75C9AB       MOV     0xc9,#-0x55
   \   00012D   75C95B       MOV     0xc9,#0x5b
   \                     ??CoordinatorApp_ProcessEvent_13:
   \   000130   80FE         SJMP    ??CoordinatorApp_ProcessEvent_13
    290              //return (events ^ CoordinatorAPP_SEND_PERIODIC_MSG_EVT);
    291            }
    292            
    293            // Discard unknown events
    294            return 0;
   \                     ??CoordinatorApp_ProcessEvent_12:
   \   000132   7A00         MOV     R2,#0x0
   \   000134   7B00         MOV     R3,#0x0
   \                     ??CoordinatorApp_ProcessEvent_7:
   \   000136   7404         MOV     A,#0x4
   \   000138   12....       LCALL   ?DEALLOC_XSTACK8
   \   00013B                REQUIRE ?Subroutine0
   \   00013B                REQUIRE _A_IEN0
   \   00013B                REQUIRE WDCTL
   \   00013B                ; // Fall through to label ?Subroutine0
    295          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F04         MOV     R7,#0x4
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   7C70         MOV     R4,#0x70
   \   000002   7D17         MOV     R5,#0x17
   \   000004   7A01         MOV     R2,#0x1
   \   000006                REQUIRE ??Subroutine6_0
   \   000006                ; // Fall through to label ??Subroutine6_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine6_0:
   \   000000   7B00         MOV     R3,#0x0
   \   000002   90....       MOV     DPTR,#CoordinatorApp_TaskID
   \   000005   E0           MOVX    A,@DPTR
   \   000006   F9           MOV     R1,A
   \   000007   12....       LCALL   ??osal_start_timerEx?relay
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   74..         MOV     A,#AddrList & 0xff
   \   000002   25..         ADD     A,?V0 + 0
   \   000004   F8           MOV     R0,A
   \   000005   74..         MOV     A,#(AddrList >> 8) & 0xff
   \   000007   35..         ADDC    A,?V0 + 1
   \   000009   F9           MOV     R1,A
   \   00000A   8882         MOV     DPL,R0
   \   00000C   8983         MOV     DPH,R1
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   22           RET
    296          
    297          
    298          /*********************************************************************
    299           * @fn      CoordinatorApp_CMDSerial
    300           *
    301           * @brief   Send the message from the UART.
    302           *
    303           * @param   none
    304           *
    305           * @return  none
    306           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    307          void CoordinatorApp_CMDSerial(mtOSALSerialData_t * Msg)
   \                     CoordinatorApp_CMDSerial:
    308          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
    309            /***************for the serial use***********************/
    310           /* uint8 i = 0;
    311            uint8 SerialDataLen = Msg->msg[0];
    312            uint8 *str = &(Msg->msg[1]);
    313            uint8 len = str[0];//get the command data length
    314            uint8 id = str[1];// get the current id of the device 
    315            uint8 command = str[2];*/
    316            
    317             /***************for the arm use***********************/
    318           // uint8 i = 0;
    319            uint8 *str = &(Msg->msg[0]);
   \   000005   8A82         MOV     DPL,R2
   \   000007   8B83         MOV     DPH,R3
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   F5..         MOV     ?V0 + 0,A
   \   00000E   A3           INC     DPTR
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   F5..         MOV     ?V0 + 1,A
    320            uint8 len = str[FRAME_LEN];//get the command data length
   \   000012   85..82       MOV     DPL,?V0 + 0
   \   000015   F583         MOV     DPH,A
   \   000017   E0           MOVX    A,@DPTR
   \   000018   FA           MOV     R2,A
    321            uint8 id = str[FRAME_ROOMID];// get the current id of the device 
   \   000019   A3           INC     DPTR
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   FE           MOV     R6,A
    322            uint8 command = str[FRAME_CMD];
   \   00001C   85..82       MOV     DPL,?V0 + 0
   \   00001F   85..83       MOV     DPH,?V0 + 1
   \   000022   A3           INC     DPTR
   \   000023   A3           INC     DPTR
   \   000024   E0           MOVX    A,@DPTR
   \   000025   FB           MOV     R3,A
    323            CoordinatorApp_P2PDstAddr.addr.shortAddr = AddrList[id].addr;// get the addres of the device id
   \   000026   8E..         MOV     ?V0 + 2,R6
   \   000028   75..00       MOV     ?V0 + 3,#0x0
   \   00002B   7402         MOV     A,#0x2
   \   00002D   78..         MOV     R0,#?V0 + 2
   \   00002F   12....       LCALL   ?S_SHL
   \   000032   74..         MOV     A,#AddrList & 0xff
   \   000034   25..         ADD     A,?V0 + 2
   \   000036   F582         MOV     DPL,A
   \   000038   74..         MOV     A,#(AddrList >> 8) & 0xff
   \   00003A   35..         ADDC    A,?V0 + 3
   \   00003C   F583         MOV     DPH,A
   \   00003E   12....       LCALL   ??Subroutine5_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   000041   90....       MOV     DPTR,#CoordinatorApp_P2PDstAddr
   \   000044   E8           MOV     A,R0
   \   000045   F0           MOVX    @DPTR,A
   \   000046   A3           INC     DPTR
   \   000047   E9           MOV     A,R1
   \   000048   F0           MOVX    @DPTR,A
    324            switch (command)
   \   000049   EB           MOV     A,R3
   \   00004A   24F0         ADD     A,#-0x10
   \   00004C   6017         JZ      ??CoordinatorApp_CMDSerial_0
   \   00004E   14           DEC     A
   \   00004F   7076         JNZ     ??CoordinatorApp_CMDSerial_1
    325            {
    326              case CMD_INIT_COOR:  // reset the coordinator for arm
    327                  if(len == 1)
   \   000051   7401         MOV     A,#0x1
   \   000053   6A           XRL     A,R2
   \   000054   6003         JZ      $+5
   \   000056   02....       LJMP    ??CoordinatorApp_CMDSerial_2 & 0xFFFF
    328                  {
    329                     osal_start_timerEx(CoordinatorApp_TaskID,
    330                                        CoordinatorAPP_REST_MSG_EVT ,
    331                                     300);
   \   000059                ; Setup parameters for call to function osal_start_timerEx
   \   000059   7C2C         MOV     R4,#0x2c
   \   00005B   7D01         MOV     R5,#0x1
   \   00005D   7A02         MOV     R2,#0x2
   \   00005F   12....       LCALL   ??Subroutine6_0 & 0xFFFF
    332                  }
   \                     ??CrossCallReturnLabel_10:
   \   000062   02....       LJMP    ??CoordinatorApp_CMDSerial_2 & 0xFFFF
    333                  break;
    334              case CMD_SET_PANID:
    335                {
    336                  if(len == 1)
   \                     ??CoordinatorApp_CMDSerial_0:
   \   000065   7401         MOV     A,#0x1
   \   000067   6A           XRL     A,R2
   \   000068   705D         JNZ     ??CoordinatorApp_CMDSerial_1
    337                  {
    338                    if(PANID == ((uint16) str[FRAME_PARAHIGH]));
   \   00006A   85..82       MOV     DPL,?V0 + 0
   \   00006D   85..83       MOV     DPH,?V0 + 1
   \   000070   A3           INC     DPTR
   \   000071   A3           INC     DPTR
   \   000072   A3           INC     DPTR
   \   000073   E0           MOVX    A,@DPTR
   \   000074   F8           MOV     R0,A
   \   000075   7583..       MOV     DPH,#(PANID >> 8) & 0xff
   \   000078   7582..       MOV     DPL,#PANID & 0xff
   \   00007B   E0           MOVX    A,@DPTR
   \   00007C   68           XRL     A,R0
   \   00007D   7002         JNZ     ??CoordinatorApp_CMDSerial_3
   \   00007F   A3           INC     DPTR
   \   000080   E0           MOVX    A,@DPTR
   \                     ??CoordinatorApp_CMDSerial_3:
   \   000081   6049         JZ      ??CoordinatorApp_CMDSerial_4
    339                    else
    340                    {
    341                     PANID = ((uint16)str[FRAME_PARAHIGH]);
   \   000083   85..82       MOV     DPL,?V0 + 0
   \   000086   85..83       MOV     DPH,?V0 + 1
   \   000089   A3           INC     DPTR
   \   00008A   A3           INC     DPTR
   \   00008B   A3           INC     DPTR
   \   00008C   E0           MOVX    A,@DPTR
   \   00008D   90....       MOV     DPTR,#PANID
   \   000090   F0           MOVX    @DPTR,A
   \   000091   A3           INC     DPTR
   \   000092   E4           CLR     A
   \   000093   F0           MOVX    @DPTR,A
    342                    // tell or the enddevice that the PanId will be changed 
    343                    CoordinatorApp_SendBroadcastMessage(COORDINATOR_COMMAND_CLUSTERID,4,str);
   \   000094                ; Setup parameters for call to function CoordinatorApp_SendBroadcastMessage
   \   000094   78..         MOV     R0,#?V0 + 0
   \   000096   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000099   7C04         MOV     R4,#0x4
   \   00009B   7D00         MOV     R5,#0x0
   \   00009D   7A02         MOV     R2,#0x2
   \   00009F   7B00         MOV     R3,#0x0
   \   0000A1   12....       LCALL   ??CoordinatorApp_SendBroadcastMessage?relay
   \   0000A4   7402         MOV     A,#0x2
   \   0000A6   12....       LCALL   ?DEALLOC_XSTACK8
    344                    _NIB.nwkPanId = PANID;
   \   0000A9   90....       MOV     DPTR,#PANID
   \   0000AC   12....       LCALL   ??Subroutine5_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   0000AF   90....       MOV     DPTR,#_NIB + 33
   \   0000B2   E8           MOV     A,R0
   \   0000B3   F0           MOVX    @DPTR,A
   \   0000B4   A3           INC     DPTR
   \   0000B5   E9           MOV     A,R1
   \   0000B6   F0           MOVX    @DPTR,A
    345                    NLME_UpdateNV(0x01);
   \   0000B7                ; Setup parameters for call to function NLME_UpdateNV
   \   0000B7   7901         MOV     R1,#0x1
   \   0000B9   12....       LCALL   ??NLME_UpdateNV?relay
    346                    osal_start_timerEx(CoordinatorApp_TaskID,
    347                                        CoordinatorAPP_REST_MSG_EVT ,
    348                                     CoordinatorAPP_REST_MSG_TIMEOUT);
   \   0000BC                ; Setup parameters for call to function osal_start_timerEx
   \   0000BC   7CB8         MOV     R4,#-0x48
   \   0000BE   7D0B         MOV     R5,#0xb
   \   0000C0   7A02         MOV     R2,#0x2
   \   0000C2   12....       LCALL   ??Subroutine6_0 & 0xFFFF
    349                    
    350                     } 
    351                  }
    352                }
   \                     ??CrossCallReturnLabel_11:
   \   0000C5   8005         SJMP    ??CoordinatorApp_CMDSerial_4
    353                default:
    354                  if((len == 1) && (id <= DEVICEID_MAX))
   \                     ??CoordinatorApp_CMDSerial_1:
   \   0000C7   7401         MOV     A,#0x1
   \   0000C9   6A           XRL     A,R2
   \   0000CA   701B         JNZ     ??CoordinatorApp_CMDSerial_2
   \                     ??CoordinatorApp_CMDSerial_4:
   \   0000CC   EE           MOV     A,R6
   \   0000CD   C3           CLR     C
   \   0000CE   9465         SUBB    A,#0x65
   \   0000D0   5015         JNC     ??CoordinatorApp_CMDSerial_2
    355                  CoordinatorApp_SendP2PMessage(COORDINATOR_COMMAND_CLUSTERID,4,str);
   \   0000D2                ; Setup parameters for call to function CoordinatorApp_SendP2PMessage
   \   0000D2   78..         MOV     R0,#?V0 + 0
   \   0000D4   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000D7   7C04         MOV     R4,#0x4
   \   0000D9   7D00         MOV     R5,#0x0
   \   0000DB   7A02         MOV     R2,#0x2
   \   0000DD   7B00         MOV     R3,#0x0
   \   0000DF   12....       LCALL   ??CoordinatorApp_SendP2PMessage?relay
   \   0000E2   7402         MOV     A,#0x2
   \   0000E4   12....       LCALL   ?DEALLOC_XSTACK8
    356                  break;
    357              }
    358             // for(i = 0; i<SerialDataLen;i++)
    359             // {
    360               // HalUARTWrite(0,&str[i],1); 
    361              //}
    362          }
   \                     ??CoordinatorApp_CMDSerial_2:
   \   0000E7   02....       LJMP    ?Subroutine0 & 0xFFFF

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??CoordinatorApp_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    CoordinatorApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??CoordinatorApp_ProcessEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    CoordinatorApp_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??CoordinatorApp_CMDSerial?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    CoordinatorApp_CMDSerial

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Group 1">`:
   \   000000   47726F75     DB "Group 1"
   \            70203100

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0, 0, 0, 0}>`:
   \   000000   00           DB 0
   \   000001   00           DB 0
   \   000002   00           DB 0
   \   000003   00           DB 0
    363          
    364          
    365          
    366          
    367          /*********************************************************************
    368          
    369          *********************************************************************/

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     CoordinatorApp_CMDSerial           2      0     30
       -> osal_start_timerEx            0      0     24
       -> CoordinatorApp_SendBroadcastMessage
                                        0      0     28
       -> NLME_UpdateNV                 0      0     24
       -> osal_start_timerEx            0      0     24
       -> CoordinatorApp_SendP2PMessage
                                        0      0     28
     CoordinatorApp_Init                0      0     14
       -> MT_UartInit                   0      0     22
       -> MT_UartRegisterTaskID         0      0     22
       -> afRegister                    0      0     22
       -> RegisterForKeys               0      0     22
       -> osal_memcpy                   0      0     28
       -> aps_AddGroup                  0      0     22
       -> HalLcd_HW_WaitMs              0      0     22
     CoordinatorApp_ProcessEvent        2      0     16
       -> osal_msg_receive              0      0     32
       -> CoordinatorWriteUART          0      0     32
       -> osal_start_timerEx            0      0     32
       -> osal_msg_deallocate           0      0     32
       -> osal_msg_receive              0      0     32
       -> CoordinatorApp_CMDSerial      0      0     32
       -> CoordinatorApp_HandleAfIncomingMessage
                                        0      0     32
       -> osal_start_timerEx            0      0     32


   Segment part sizes:

     Function/Label                      Bytes
     --------------                      -----
     _A_IEN0                                1
     WDCTL                                  1
     CoordinatorApp_Init                  191
     ?Subroutine4                           3
     ??Subroutine5_0                        6
     ?Subroutine2                          17
     CoordinatorApp_ProcessEvent          315
     ?Subroutine0                           5
     ?Subroutine3                           6
     ??Subroutine6_0                       11
     ?Subroutine1                          17
     CoordinatorApp_CMDSerial             234
     ??CoordinatorApp_Init?relay            6
     ??CoordinatorApp_ProcessEvent?relay    6
     ??CoordinatorApp_CMDSerial?relay       6
     ?<Constant "Group 1">                  8
     ?<Constant {0, 0, 0, 0}>               4

 
 805 bytes in segment BANKED_CODE
  18 bytes in segment BANK_RELAYS
   2 bytes in segment SFR_AN
  12 bytes in segment XDATA_ROM_C
 
 823 bytes of CODE  memory
  12 bytes of CONST memory
   0 bytes of DATA  memory (+ 2 bytes shared)

Errors: none
Warnings: none
